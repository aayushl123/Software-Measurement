Complexity metrics,Sun, 23 Jun 2019 17:35:44 EDT
Method,ev(G),iv(G),LOC,V,v(G)
"null.compare(ByteOrderMark,ByteOrderMark)",3,1,11,87,3
"org.apache.commons.io.ByteOrderMark.ByteOrderMark(String,int...)",3,2,21,182,5
"org.apache.commons.io.ByteOrderMark.equals(Object)",5,2,23,162,5
"org.apache.commons.io.ByteOrderMark.get(int)",1,1,9,13,1
"org.apache.commons.io.ByteOrderMark.getBytes()",1,1,12,85,2
"org.apache.commons.io.ByteOrderMark.getCharsetName()",1,1,8,4,1
"org.apache.commons.io.ByteOrderMark.hashCode()",1,1,14,38,2
"org.apache.commons.io.ByteOrderMark.length()",1,1,8,11,1
"org.apache.commons.io.ByteOrderMark.toString()",1,3,22,233,3
"org.apache.commons.io.ByteOrderMarkTestCase.ByteOrderMarkTestCase(String)",1,1,3,8,1
"org.apache.commons.io.ByteOrderMarkTestCase.testCharsetName()",1,1,6,62,1
"org.apache.commons.io.ByteOrderMarkTestCase.testConstantCharsetNames()",1,1,8,73,1
"org.apache.commons.io.ByteOrderMarkTestCase.testEquals()",1,1,11,247,1
"org.apache.commons.io.ByteOrderMarkTestCase.testErrors()",1,1,27,157,5
"org.apache.commons.io.ByteOrderMarkTestCase.testGet()",1,1,9,162,1
"org.apache.commons.io.ByteOrderMarkTestCase.testGetBytes()",1,1,6,133,1
"org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()",1,1,7,108,1
"org.apache.commons.io.ByteOrderMarkTestCase.testLength()",1,1,6,62,1
"org.apache.commons.io.ByteOrderMarkTestCase.testToString()",1,1,6,62,1
"org.apache.commons.io.Charsets.toCharset(Charset)",1,2,10,22,2
"org.apache.commons.io.Charsets.toCharset(String)",1,2,12,26,2
"org.apache.commons.io.CharsetsTestCase.testIso8859_1()",1,1,4,15,1
"org.apache.commons.io.CharsetsTestCase.testToCharset()",1,1,7,63,1
"org.apache.commons.io.CharsetsTestCase.testUsAscii()",1,1,4,15,1
"org.apache.commons.io.CharsetsTestCase.testUtf16()",1,1,4,15,1
"org.apache.commons.io.CharsetsTestCase.testUtf16Be()",1,1,4,15,1
"org.apache.commons.io.CharsetsTestCase.testUtf16Le()",1,1,4,15,1
"org.apache.commons.io.CharsetsTestCase.testUtf8()",1,1,4,15,1
"org.apache.commons.io.CopyUtils.CopyUtils()",1,1,4,0,1
"org.apache.commons.io.CopyUtils.copy(InputStream,OutputStream)",1,2,21,125,2
"org.apache.commons.io.CopyUtils.copy(InputStream,Writer)",1,1,15,28,1
"org.apache.commons.io.CopyUtils.copy(InputStream,Writer,String)",1,1,18,33,1
"org.apache.commons.io.CopyUtils.copy(Reader,OutputStream)",1,1,17,36,1
"org.apache.commons.io.CopyUtils.copy(Reader,Writer)",1,2,20,125,2
"org.apache.commons.io.CopyUtils.copy(String,OutputStream)",1,1,19,44,1
"org.apache.commons.io.CopyUtils.copy(String,Writer)",1,1,10,19,1
"org.apache.commons.io.CopyUtils.copy(byte[],OutputStream)",1,1,10,24,1
"org.apache.commons.io.CopyUtils.copy(byte[],Writer)",1,1,13,33,1
"org.apache.commons.io.CopyUtils.copy(byte[],Writer,String)",1,1,18,38,1
"org.apache.commons.io.CopyUtilsTest.CopyUtilsTest(String)",1,1,3,8,1
"org.apache.commons.io.CopyUtilsTest.setUp()",1,1,3,4,1
"org.apache.commons.io.CopyUtilsTest.tearDown()",1,1,3,4,1
"org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToOutputStream()",1,1,7,95,1
"org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter()",1,1,9,122,1
"org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriterWithEncoding()",1,1,7,59,1
"org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()",1,1,11,176,1
"org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter()",1,1,12,176,1
"org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriterWithEncoding()",1,1,7,62,1
"org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()",1,1,16,136,1
"org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter()",1,1,16,197,1
"org.apache.commons.io.CopyUtilsTest.testCopy_stringToOutputStream()",1,1,14,112,1
"org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter()",1,1,10,138,1
"org.apache.commons.io.CopyUtilsTest.testCtor()",1,1,4,4,1
"org.apache.commons.io.DemuxTestCase.ReaderThread.ReaderThread(String,InputStream,DemuxInputStream)",1,1,8,19,1
"org.apache.commons.io.DemuxTestCase.ReaderThread.getData()",1,1,4,8,1
"org.apache.commons.io.DemuxTestCase.ReaderThread.run()",1,3,21,150,3
"org.apache.commons.io.DemuxTestCase.WriterThread.WriterThread(String,String,OutputStream,DemuxOutputStream)",1,1,10,33,1
"org.apache.commons.io.DemuxTestCase.WriterThread.run()",1,3,18,102,3
"org.apache.commons.io.DemuxTestCase.doJoin()",1,2,11,60,2
"org.apache.commons.io.DemuxTestCase.doStart()",1,2,11,60,2
"org.apache.commons.io.DemuxTestCase.getInput(String)",1,1,6,31,1
"org.apache.commons.io.DemuxTestCase.getOutput(String)",1,1,7,31,1
"org.apache.commons.io.DemuxTestCase.startReader(String,String,DemuxInputStream)",1,1,9,50,1
"org.apache.commons.io.DemuxTestCase.startWriter(String,String,DemuxOutputStream)",1,1,11,60,1
"org.apache.commons.io.DemuxTestCase.testInputStream()",1,1,16,187,1
"org.apache.commons.io.DemuxTestCase.testOutputStream()",1,1,16,187,1
"org.apache.commons.io.DirectoryWalker.CancelException.CancelException(File,int)",1,1,10,19,1
"org.apache.commons.io.DirectoryWalker.CancelException.CancelException(String,File,int)",1,1,14,36,1
"org.apache.commons.io.DirectoryWalker.CancelException.getDepth()",1,1,8,8,1
"org.apache.commons.io.DirectoryWalker.CancelException.getFile()",1,1,8,4,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker()",1,1,6,15,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker(FileFilter,int)",1,1,16,22,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker(IOFileFilter,IOFileFilter,int)",1,2,26,166,5
"org.apache.commons.io.DirectoryWalker.checkIfCancelled(File,int,Collection<T>)",2,1,19,50,2
"org.apache.commons.io.DirectoryWalker.filterDirectoryContents(File,int,File[])",1,1,15,11,1
"org.apache.commons.io.DirectoryWalker.handleCancelled(File,Collection<T>,CancelException)",1,1,18,11,1
"org.apache.commons.io.DirectoryWalker.handleDirectory(File,int,Collection<T>)",1,1,19,15,1
"org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(File,int,Collection<T>)",1,1,13,8,1
"org.apache.commons.io.DirectoryWalker.handleDirectoryStart(File,int,Collection<T>)",1,1,13,8,1
"org.apache.commons.io.DirectoryWalker.handleEnd(Collection<T>)",1,1,11,4,1
"org.apache.commons.io.DirectoryWalker.handleFile(File,int,Collection<T>)",1,1,13,8,1
"org.apache.commons.io.DirectoryWalker.handleIsCancelled(File,int,Collection<T>)",1,1,40,15,1
"org.apache.commons.io.DirectoryWalker.handleRestricted(File,int,Collection<T>)",1,1,13,8,1
"org.apache.commons.io.DirectoryWalker.handleStart(File,Collection<T>)",1,1,12,4,1
"org.apache.commons.io.DirectoryWalker.walk(File,Collection<T>)",2,2,27,112,3
"org.apache.commons.io.DirectoryWalker.walk(File,int,Collection<T>)",1,7,35,432,8
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker.TestCancelWalker(String,boolean)",1,1,5,26,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker.find(File)",1,1,6,22,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker.handleCancelled(File,Collection<File>,CancelException)",1,2,8,38,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker.handleDirectoryEnd(File,int,Collection<File>)",2,1,8,60,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker.handleFile(File,int,Collection<File>)",2,1,8,60,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestFalseFileFinder.TestFalseFileFinder(FileFilter,int)",1,1,3,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFalseFileFinder.handleDirectory(File,int,Collection<File>)",1,1,5,11,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder.TestFileFinder(FileFilter,int)",1,1,3,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder.TestFileFinder(IOFileFilter,IOFileFilter,int)",1,1,3,19,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder.find(File)",1,2,10,41,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder.handleDirectoryEnd(File,int,Collection<File>)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder.handleFile(File,int,Collection<File>)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinderString.TestFileFinderString(FileFilter,int)",1,1,3,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinderString.find(File)",1,2,10,41,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinderString.handleFile(File,int,Collection<String>)",1,1,5,19,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.TestMultiThreadCancelWalker(String,boolean)",1,1,5,26,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.find(File)",1,1,6,25,1
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.handleCancelled(File,Collection<File>,CancelException)",1,2,8,38,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.handleDirectoryEnd(File,int,Collection<File>)",1,1,9,60,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.handleFile(File,int,Collection<File>)",1,1,9,60,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker.handleIsCancelled(File,int,Collection<File>)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(String,File[],Collection<File>)",1,2,8,88,2
"org.apache.commons.io.DirectoryWalkerTestCase.checkContainsString(String,File[],Collection<String>)",1,2,5,94,2
"org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter(File[])",1,2,11,83,2
"org.apache.commons.io.DirectoryWalkerTestCase.directoriesOnly(Collection<File>)",1,3,12,48,3
"org.apache.commons.io.DirectoryWalkerTestCase.filesOnly(Collection<File>)",1,3,12,48,3
"org.apache.commons.io.DirectoryWalkerTestCase.testCancel()",1,6,37,498,6
"org.apache.commons.io.DirectoryWalkerTestCase.testFilter()",1,1,12,169,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitA()",1,1,9,66,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitB()",1,1,10,89,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitC()",1,1,12,140,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterAndLimitD()",1,1,11,129,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile1()",1,1,11,142,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile2()",1,1,11,144,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile3()",1,1,11,128,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterDirAndFile4()",1,1,11,115,1
"org.apache.commons.io.DirectoryWalkerTestCase.testFilterString()",1,1,10,108,1
"org.apache.commons.io.DirectoryWalkerTestCase.testHandleStartDirectoryFalse()",1,1,8,48,1
"org.apache.commons.io.DirectoryWalkerTestCase.testLimitToCurrent()",1,1,9,72,1
"org.apache.commons.io.DirectoryWalkerTestCase.testMissingStartDirectory()",1,1,17,131,2
"org.apache.commons.io.DirectoryWalkerTestCase.testMultiThreadCancel()",1,6,40,546,6
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.DirectoryWalkerTestCaseJava4(String)",1,1,4,8,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker.TestCancelWalker(String,boolean)",1,1,5,26,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker.find(File)",1,1,6,22,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker.handleCancelled(File,Collection,CancelException)",1,2,8,38,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker.handleDirectoryEnd(File,int,Collection)",2,1,8,60,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker.handleFile(File,int,Collection)",2,1,8,60,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFalseFileFinder.TestFalseFileFinder(FileFilter,int)",1,1,3,15,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFalseFileFinder.handleDirectory(File,int,Collection)",1,1,5,11,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder.TestFileFinder(FileFilter,int)",1,1,3,15,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder.TestFileFinder(IOFileFilter,IOFileFilter,int)",1,1,3,19,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder.find(File)",1,2,10,41,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder.handleDirectoryEnd(File,int,Collection)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder.handleFile(File,int,Collection)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.TestMultiThreadCancelWalker(String,boolean)",1,1,5,26,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.find(File)",1,1,6,25,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.handleCancelled(File,Collection,CancelException)",1,2,8,38,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.handleDirectoryEnd(File,int,Collection)",1,1,9,60,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.handleFile(File,int,Collection)",1,1,9,60,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker.handleIsCancelled(File,int,Collection)",1,1,5,15,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.checkContainsFiles(String,File[],Collection)",1,2,8,88,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter(File[])",1,2,11,83,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.directoriesOnly(Collection)",1,3,13,74,3
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.filesOnly(Collection)",1,3,13,74,3
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.setUp()",1,1,5,11,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.tearDown()",1,1,5,11,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testCancel()",1,6,36,498,6
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilter()",1,1,11,169,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitA()",1,1,8,66,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitB()",1,1,9,89,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitC()",1,1,11,140,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterAndLimitD()",1,1,10,129,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile1()",1,1,10,142,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile2()",1,1,10,144,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile3()",1,1,10,128,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testFilterDirAndFile4()",1,1,10,115,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testHandleStartDirectoryFalse()",1,1,7,48,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testLimitToCurrent()",1,1,8,72,1
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMissingStartDirectory()",1,1,16,131,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMultiThreadCancel()",1,6,39,546,6
"org.apache.commons.io.EndianUtils.EndianUtils()",1,1,6,4,1
"org.apache.commons.io.EndianUtils.read(InputStream)",2,1,15,66,2
"org.apache.commons.io.EndianUtils.readSwappedDouble(InputStream)",1,1,12,24,1
"org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)",1,1,10,33,1
"org.apache.commons.io.EndianUtils.readSwappedFloat(InputStream)",1,1,12,24,1
"org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)",1,1,10,33,1
"org.apache.commons.io.EndianUtils.readSwappedInteger(InputStream)",1,1,19,154,1
"org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)",1,1,13,158,1
"org.apache.commons.io.EndianUtils.readSwappedLong(InputStream)",1,2,16,104,2
"org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)",1,1,20,375,1
"org.apache.commons.io.EndianUtils.readSwappedShort(InputStream)",1,1,13,70,1
"org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)",1,1,11,93,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(InputStream)",1,1,20,199,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)",1,1,15,200,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(InputStream)",1,1,15,85,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)",1,1,12,87,1
"org.apache.commons.io.EndianUtils.swapDouble(double)",1,1,8,26,1
"org.apache.commons.io.EndianUtils.swapFloat(float)",1,1,8,26,1
"org.apache.commons.io.EndianUtils.swapInteger(int)",1,1,12,122,1
"org.apache.commons.io.EndianUtils.swapLong(long)",1,1,16,249,1
"org.apache.commons.io.EndianUtils.swapShort(short)",1,1,9,75,1
"org.apache.commons.io.EndianUtils.writeSwappedDouble(OutputStream,double)",1,1,12,28,1
"org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)",1,1,10,38,1
"org.apache.commons.io.EndianUtils.writeSwappedFloat(OutputStream,float)",1,1,12,28,1
"org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)",1,1,10,38,1
"org.apache.commons.io.EndianUtils.writeSwappedInteger(OutputStream,int)",1,1,15,148,1
"org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)",1,1,13,195,1
"org.apache.commons.io.EndianUtils.writeSwappedLong(OutputStream,long)",1,1,19,298,1
"org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)",1,1,17,413,1
"org.apache.commons.io.EndianUtils.writeSwappedShort(OutputStream,short)",1,1,13,79,1
"org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)",1,1,11,104,1
"org.apache.commons.io.EndianUtilsTest.EndianUtilsTest(String)",1,1,3,8,1
"org.apache.commons.io.EndianUtilsTest.testCtor()",1,1,4,4,1
"org.apache.commons.io.EndianUtilsTest.testEOFException()",1,1,9,41,2
"org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()",1,1,8,148,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()",1,1,8,122,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()",1,1,6,84,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()",1,1,6,108,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()",1,1,6,72,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()",1,1,6,84,1
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()",1,1,6,72,1
"org.apache.commons.io.EndianUtilsTest.testSwapDouble()",1,1,6,62,1
"org.apache.commons.io.EndianUtilsTest.testSwapFloat()",1,1,6,64,1
"org.apache.commons.io.EndianUtilsTest.testSwapInteger()",1,1,9,114,1
"org.apache.commons.io.EndianUtilsTest.testSwapLong()",1,1,6,59,1
"org.apache.commons.io.EndianUtilsTest.testSwapShort()",1,1,6,82,1
"org.apache.commons.io.EndianUtilsTest.testSymmetry()",1,1,13,164,1
"org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong()",1,2,17,230,2
"org.apache.commons.io.EndianUtilsTest.testUnsignedOverrun()",1,1,10,125,1
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()",1,1,24,430,1
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()",1,1,16,247,1
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()",1,1,15,224,1
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()",1,1,23,403,1
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()",1,1,11,154,1
"org.apache.commons.io.FileCleaner.exitWhenFinished()",1,1,26,15,1
"org.apache.commons.io.FileCleaner.getInstance()",1,1,11,8,1
"org.apache.commons.io.FileCleaner.getTrackCount()",1,1,11,15,1
"org.apache.commons.io.FileCleaner.track(File,Object)",1,1,14,19,1
"org.apache.commons.io.FileCleaner.track(File,Object,FileDeleteStrategy)",1,1,15,24,1
"org.apache.commons.io.FileCleaner.track(String,Object)",1,1,14,19,1
"org.apache.commons.io.FileCleaner.track(String,Object,FileDeleteStrategy)",1,1,15,24,1
"org.apache.commons.io.FileCleanerTestCase.FileCleanerTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileCleanerTestCase.newInstance()",1,1,4,4,1
"org.apache.commons.io.FileCleaningTracker.Reaper.Reaper()",1,1,6,19,1
"org.apache.commons.io.FileCleaningTracker.Reaper.run()",2,4,21,134,5
"org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(String,FileDeleteStrategy,Object,ReferenceQueue<? super Object>)",1,1,13,53,2
"org.apache.commons.io.FileCleaningTracker.Tracker.delete()",1,1,9,19,1
"org.apache.commons.io.FileCleaningTracker.Tracker.getPath()",1,1,8,4,1
"org.apache.commons.io.FileCleaningTracker.addTracker(String,Object,FileDeleteStrategy)",2,2,18,95,3
"org.apache.commons.io.FileCleaningTracker.exitWhenFinished()",1,2,30,43,2
"org.apache.commons.io.FileCleaningTracker.getDeleteFailures()",1,1,9,4,1
"org.apache.commons.io.FileCleaningTracker.getTrackCount()",1,1,9,11,1
"org.apache.commons.io.FileCleaningTracker.track(File,Object)",1,1,12,15,1
"org.apache.commons.io.FileCleaningTracker.track(File,Object,FileDeleteStrategy)",2,1,16,51,2
"org.apache.commons.io.FileCleaningTracker.track(String,Object)",1,1,12,15,1
"org.apache.commons.io.FileCleaningTracker.track(String,Object,FileDeleteStrategy)",2,1,16,46,2
"org.apache.commons.io.FileCleaningTrackerTestCase.FileCleaningTrackerTestCase(String)",1,1,4,24,1
"org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()",1,1,3,4,1
"org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete(File)",1,3,11,83,4
"org.apache.commons.io.FileCleaningTrackerTestCase.setUp()",1,1,6,19,1
"org.apache.commons.io.FileCleaningTrackerTestCase.showFailures()",2,2,7,85,2
"org.apache.commons.io.FileCleaningTrackerTestCase.tearDown()",1,1,20,88,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory()",1,1,14,168,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy()",1,1,15,230,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_NullStrategy()",1,1,14,172,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()",1,1,24,512,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()",1,3,27,451,3
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()",1,1,10,105,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()",1,1,16,138,2
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerFile()",1,1,17,213,1
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerNull()",1,1,26,125,5
"org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()",2,4,21,232,6
"org.apache.commons.io.FileDeleteStrategy.FileDeleteStrategy(String)",1,1,8,8,1
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy.ForceFileDeleteStrategy()",1,1,4,4,1
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy.doDelete(File)",1,1,16,19,1
"org.apache.commons.io.FileDeleteStrategy.delete(File)",2,2,15,60,3
"org.apache.commons.io.FileDeleteStrategy.deleteQuietly(File)",2,2,20,76,4
"org.apache.commons.io.FileDeleteStrategy.doDelete(File)",1,1,19,15,1
"org.apache.commons.io.FileDeleteStrategy.toString()",1,1,9,11,1
"org.apache.commons.io.FileDeleteStrategyTestCase.FileDeleteStrategyTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileDeleteStrategyTestCase.setUp()",1,1,4,11,1
"org.apache.commons.io.FileDeleteStrategyTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()",1,1,16,154,1
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()",1,1,29,241,2
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()",1,1,9,44,2
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()",1,1,23,233,1
"org.apache.commons.io.FileDeleteStrategyTestCase.testToString()",1,1,4,30,1
"org.apache.commons.io.FileExistsException.FileExistsException()",1,1,6,4,1
"org.apache.commons.io.FileExistsException.FileExistsException(File)",1,1,8,15,1
"org.apache.commons.io.FileExistsException.FileExistsException(String)",1,1,8,8,1
"org.apache.commons.io.FileSystemUtils.FileSystemUtils()",1,1,6,4,1
"org.apache.commons.io.FileSystemUtils.freeSpace(String)",1,1,30,43,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb()",1,1,15,24,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(String)",1,1,27,28,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(String,long)",1,1,29,41,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)",1,1,17,36,1
"org.apache.commons.io.FileSystemUtils.freeSpaceOS(String,int,boolean,long)",7,6,38,250,8
"org.apache.commons.io.FileSystemUtils.freeSpaceUnix(String,boolean,boolean,long)",5,4,54,564,9
"org.apache.commons.io.FileSystemUtils.freeSpaceWindows(String,long)",3,4,33,324,5
"org.apache.commons.io.FileSystemUtils.openProcess(String[])",1,1,10,11,1
"org.apache.commons.io.FileSystemUtils.parseBytes(String,String)",2,1,23,131,3
"org.apache.commons.io.FileSystemUtils.parseDir(String,String)",6,8,50,543,11
"org.apache.commons.io.FileSystemUtils.performCommand(String[],int,long)",3,7,66,601,7
"org.apache.commons.io.FileSystemUtilsTestCase.FileSystemUtilsTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils.MockFileSystemUtils(int,String)",1,1,3,19,1
"org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils.MockFileSystemUtils(int,String,String)",1,1,5,39,1
"org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils.openProcess(String[])",1,2,3,138,2
"org.apache.commons.io.FileSystemUtilsTestCase.setUp()",1,1,3,4,1
"org.apache.commons.io.FileSystemUtilsTestCase.tearDown()",1,1,3,4,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()",1,1,11,98,3
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()",1,1,12,93,3
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()",1,1,11,93,3
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()",1,1,4,140,2
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()",1,1,4,123,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()",1,1,23,200,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()",1,1,20,192,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()",1,1,22,200,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()",1,1,22,200,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()",1,1,22,200,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()",1,1,22,200,5
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()",1,1,8,73,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()",1,1,8,75,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()",1,1,8,68,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()",1,1,9,69,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()",1,1,10,69,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()",1,1,9,69,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()",1,1,8,68,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()",1,1,8,58,2
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()",1,1,17,114,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()",1,1,8,58,2
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()",1,1,8,58,2
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()",1,1,13,79,2
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()",1,1,16,114,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()",1,1,19,108,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()",1,1,16,114,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()",1,1,16,114,1
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()",1,7,45,714,9
"org.apache.commons.io.FileUtils.FileUtils()",1,1,6,4,1
"org.apache.commons.io.FileUtils.byteCountToDisplaySize(BigInteger)",1,7,36,499,7
"org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)",1,1,19,19,1
"org.apache.commons.io.FileUtils.checkDirectory(File)",3,1,14,77,3
"org.apache.commons.io.FileUtils.checksum(File,Checksum)",2,1,30,98,2
"org.apache.commons.io.FileUtils.checksumCRC32(File)",1,1,16,36,1
"org.apache.commons.io.FileUtils.cleanDirectory(File)",5,2,31,240,7
"org.apache.commons.io.FileUtils.cleanDirectoryOnExit(File)",5,2,32,240,7
"org.apache.commons.io.FileUtils.contentEquals(File,File)",6,2,47,301,7
"org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File,File,String)",5,2,50,351,7
"org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(Collection<File>)",1,1,11,22,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File)",1,1,27,28,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter)",1,1,48,33,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter,boolean)",6,5,77,526,11
"org.apache.commons.io.FileUtils.copyDirectory(File,File,boolean)",1,1,30,38,1
"org.apache.commons.io.FileUtils.copyDirectoryToDirectory(File,File)",5,3,38,238,7
"org.apache.commons.io.FileUtils.copyFile(File,File)",1,1,24,28,1
"org.apache.commons.io.FileUtils.copyFile(File,File,boolean)",9,4,52,458,11
"org.apache.commons.io.FileUtils.copyFile(File,OutputStream)",1,1,25,57,1
"org.apache.commons.io.FileUtils.copyFileToDirectory(File,File)",1,1,24,33,1
"org.apache.commons.io.FileUtils.copyFileToDirectory(File,File,boolean)",3,2,35,160,4
"org.apache.commons.io.FileUtils.copyInputStreamToFile(InputStream,File)",1,1,28,72,1
"org.apache.commons.io.FileUtils.copyURLToFile(URL,File)",1,1,23,36,1
"org.apache.commons.io.FileUtils.copyURLToFile(URL,File,int,int)",1,1,28,76,1
"org.apache.commons.io.FileUtils.decodeUrl(String)",4,8,46,496,9
"org.apache.commons.io.FileUtils.deleteDirectory(File)",3,2,19,102,4
"org.apache.commons.io.FileUtils.deleteDirectoryOnExit(File)",2,2,16,60,3
"org.apache.commons.io.FileUtils.deleteQuietly(File)",2,2,31,87,5
"org.apache.commons.io.FileUtils.directoryContains(File,File)",5,2,43,213,6
"org.apache.commons.io.FileUtils.doCopyDirectory(File,File,FileFilter,boolean,List<String>)",6,9,45,515,13
"org.apache.commons.io.FileUtils.doCopyFile(File,File,boolean)",3,4,42,488,7
"org.apache.commons.io.FileUtils.forceDelete(File)",4,2,30,133,4
"org.apache.commons.io.FileUtils.forceDeleteOnExit(File)",1,2,15,39,2
"org.apache.commons.io.FileUtils.forceMkdir(File)",5,3,34,140,5
"org.apache.commons.io.FileUtils.getFile(File,String...)",3,1,21,97,4
"org.apache.commons.io.FileUtils.getFile(String...)",2,1,21,98,4
"org.apache.commons.io.FileUtils.getTempDirectory()",1,1,10,11,1
"org.apache.commons.io.FileUtils.getTempDirectoryPath()",1,1,10,11,1
"org.apache.commons.io.FileUtils.getUserDirectory()",1,1,10,11,1
"org.apache.commons.io.FileUtils.getUserDirectoryPath()",1,1,10,11,1
"org.apache.commons.io.FileUtils.innerListFiles(Collection<File>,File,IOFileFilter,boolean)",1,5,25,127,5
"org.apache.commons.io.FileUtils.isFileNewer(File,Date)",2,1,18,57,2
"org.apache.commons.io.FileUtils.isFileNewer(File,File)",3,1,23,100,3
"org.apache.commons.io.FileUtils.isFileNewer(File,long)",3,1,21,91,3
"org.apache.commons.io.FileUtils.isFileOlder(File,Date)",2,1,18,57,2
"org.apache.commons.io.FileUtils.isFileOlder(File,File)",3,1,23,100,3
"org.apache.commons.io.FileUtils.isFileOlder(File,long)",3,1,21,91,3
"org.apache.commons.io.FileUtils.isSymlink(File)",4,2,34,197,5
"org.apache.commons.io.FileUtils.iterateFiles(File,IOFileFilter,IOFileFilter)",1,1,22,24,1
"org.apache.commons.io.FileUtils.iterateFiles(File,String[],boolean)",1,1,17,31,1
"org.apache.commons.io.FileUtils.iterateFilesAndDirs(File,IOFileFilter,IOFileFilter)",1,1,23,24,1
"org.apache.commons.io.FileUtils.lineIterator(File)",1,1,12,19,1
"org.apache.commons.io.FileUtils.lineIterator(File,String)",1,3,44,85,3
"org.apache.commons.io.FileUtils.listFiles(File,IOFileFilter,IOFileFilter)",1,1,36,76,1
"org.apache.commons.io.FileUtils.listFiles(File,String[],boolean)",1,2,22,91,3
"org.apache.commons.io.FileUtils.listFilesAndDirs(File,IOFileFilter,IOFileFilter)",1,2,32,106,2
"org.apache.commons.io.FileUtils.moveDirectory(File,File)",9,2,42,393,9
"org.apache.commons.io.FileUtils.moveDirectoryToDirectory(File,File,boolean)",5,3,32,252,7
"org.apache.commons.io.FileUtils.moveFile(File,File)",9,3,42,363,9
"org.apache.commons.io.FileUtils.moveFileToDirectory(File,File,boolean)",5,3,32,252,7
"org.apache.commons.io.FileUtils.moveToDirectory(File,File,boolean)",4,2,31,180,5
"org.apache.commons.io.FileUtils.openInputStream(File)",4,2,31,137,4
"org.apache.commons.io.FileUtils.openOutputStream(File)",1,1,23,19,1
"org.apache.commons.io.FileUtils.openOutputStream(File,boolean)",6,4,40,235,7
"org.apache.commons.io.FileUtils.readFileToByteArray(File)",1,1,18,64,1
"org.apache.commons.io.FileUtils.readFileToString(File)",1,1,12,19,1
"org.apache.commons.io.FileUtils.readFileToString(File,Charset)",1,1,19,60,1
"org.apache.commons.io.FileUtils.readFileToString(File,String)",1,1,18,24,1
"org.apache.commons.io.FileUtils.readLines(File)",1,1,12,19,1
"org.apache.commons.io.FileUtils.readLines(File,Charset)",1,1,19,60,1
"org.apache.commons.io.FileUtils.readLines(File,String)",1,1,18,24,1
"org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(IOFileFilter)",1,2,10,31,2
"org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(IOFileFilter)",1,1,9,19,1
"org.apache.commons.io.FileUtils.sizeOf(File)",3,2,29,94,3
"org.apache.commons.io.FileUtils.sizeOfAsBigInteger(File)",3,2,29,94,3
"org.apache.commons.io.FileUtils.sizeOfDirectory(File)",5,3,31,160,6
"org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(File)",2,3,28,138,5
"org.apache.commons.io.FileUtils.toFile(URL)",2,3,23,112,3
"org.apache.commons.io.FileUtils.toFiles(URL[])",5,3,36,235,6
"org.apache.commons.io.FileUtils.toSuffixes(String[])",1,1,14,85,2
"org.apache.commons.io.FileUtils.toURLs(File[])",1,2,17,94,2
"org.apache.commons.io.FileUtils.touch(File)",2,2,22,101,3
"org.apache.commons.io.FileUtils.validateListFilesParameters(File,IOFileFilter)",3,1,18,64,3
"org.apache.commons.io.FileUtils.waitFor(File,int)",4,2,31,157,6
"org.apache.commons.io.FileUtils.write(File,CharSequence)",1,1,11,28,1
"org.apache.commons.io.FileUtils.write(File,CharSequence,Charset)",1,1,12,28,1
"org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)",1,2,15,60,2
"org.apache.commons.io.FileUtils.write(File,CharSequence,String)",1,1,13,28,1
"org.apache.commons.io.FileUtils.write(File,CharSequence,String,boolean)",1,1,17,38,1
"org.apache.commons.io.FileUtils.write(File,CharSequence,boolean)",1,1,13,33,1
"org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[])",1,1,14,28,1
"org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],boolean)",1,1,20,81,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>)",1,1,13,31,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,String)",1,1,14,33,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,String,boolean)",1,1,17,38,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,boolean)",1,1,15,36,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>)",1,1,18,33,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String)",1,1,20,33,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)",1,1,28,115,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,boolean)",1,1,17,38,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String)",1,1,10,28,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset)",1,1,16,28,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)",1,1,21,81,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,String)",1,1,15,28,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,String,boolean)",1,1,17,38,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,boolean)",1,1,13,33,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.FileUtilsCleanDirectoryTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(File,int,boolean)",1,2,20,197,3
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.getLocalTestDirectory()",1,1,3,11,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.setUp()",1,1,7,11,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown()",1,1,8,26,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()",1,1,6,47,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()",1,1,8,108,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()",1,1,7,87,1
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()",2,3,16,168,4
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()",2,3,14,131,4
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.FileUtilsCleanSymlinksTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setUp()",1,1,4,11,1
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink(File,File)",1,1,11,114,1
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()",2,1,24,380,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()",2,1,27,452,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()",2,1,24,336,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()",2,1,16,199,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()",2,1,12,127,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()",2,1,12,122,2
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()",2,1,15,211,2
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.FileUtilsDirectoryContainsTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.setUp()",1,1,19,227,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()",1,1,7,63,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()",1,1,7,60,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()",1,1,5,34,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()",1,1,7,63,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()",1,1,7,60,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()",1,1,11,83,2
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExist()",1,1,7,60,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug()",1,1,11,78,1
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()",1,1,9,51,2
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testUnrealizedContainment()",1,1,12,85,2
"org.apache.commons.io.FileUtilsFileNewerTestCase.FileUtilsFileNewerTestCase(String)",1,1,5,39,1
"org.apache.commons.io.FileUtilsFileNewerTestCase.setUp()",1,1,7,36,1
"org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown()",1,1,6,18,1
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()",2,1,17,158,2
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(String,File,long,boolean)",1,1,30,176,1
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()",2,1,14,72,2
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()",1,1,11,28,2
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()",1,1,11,28,2
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()",1,1,11,28,2
"org.apache.commons.io.FileUtilsListFilesTestCase.FileUtilsListFilesTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(Collection<File>)",1,2,7,39,2
"org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(Iterator<File>)",1,2,7,39,2
"org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()",1,1,3,11,1
"org.apache.commons.io.FileUtilsListFilesTestCase.setUp()",1,2,34,357,2
"org.apache.commons.io.FileUtilsListFilesTestCase.tearDown()",1,1,8,15,1
"org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()",1,1,20,333,1
"org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()",1,1,44,620,2
"org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()",1,1,20,333,1
"org.apache.commons.io.FileUtilsTestCase.FileUtilsTestCase(String)",1,1,7,76,1
"org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge()",1,1,11,183,1
"org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker.ListDirectoryWalker()",1,1,3,2,1
"org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker.handleDirectoryStart(File,int,Collection<File>)",1,2,7,38,2
"org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker.handleFile(File,int,Collection<File>)",1,1,4,19,1
"org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker.list(File)",1,1,5,18,1
"org.apache.commons.io.FileUtilsTestCase.createCircularSymLink(File)",1,2,13,92,3
"org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(File,File,File)",1,1,20,307,1
"org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(boolean)",1,3,21,173,3
"org.apache.commons.io.FileUtilsTestCase.setUp()",1,1,11,72,1
"org.apache.commons.io.FileUtilsTestCase.tearDown()",1,1,5,11,1
"org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()",1,1,34,694,1
"org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()",1,1,23,569,1
"org.apache.commons.io.FileUtilsTestCase.testChecksum()",1,1,16,167,1
"org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()",1,1,14,129,1
"org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()",1,1,21,247,1
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()",1,1,8,31,2
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()",1,1,12,68,2
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()",1,1,8,28,2
"org.apache.commons.io.FileUtilsTestCase.testContentEquals()",1,1,47,520,2
"org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()",1,1,63,"1,098",2
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()",1,1,30,185,8
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()",1,1,14,257,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()",1,1,44,585,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()",1,1,16,261,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()",1,1,20,335,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()",1,1,17,260,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()",1,1,13,218,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()",1,1,7,64,1
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()",1,1,18,288,1
"org.apache.commons.io.FileUtilsTestCase.testCopyFile1()",1,1,12,72,1
"org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()",1,2,22,162,3
"org.apache.commons.io.FileUtilsTestCase.testCopyFile2()",1,1,12,72,1
"org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()",1,2,16,122,2
"org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()",1,1,12,77,1
"org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()",1,1,7,81,1
"org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()",1,1,11,59,2
"org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()",1,1,20,118,1
"org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()",1,1,20,129,1
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()",1,1,9,96,1
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()",1,1,3,15,1
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()",1,1,8,89,1
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()",1,1,3,11,1
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()",1,1,11,122,1
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()",1,1,7,68,1
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()",1,2,7,28,2
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()",1,2,9,51,2
"org.apache.commons.io.FileUtilsTestCase.testFileUtils()",1,1,26,269,1
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()",1,1,7,72,1
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()",1,1,7,72,1
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()",1,1,9,68,2
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()",1,1,7,44,1
"org.apache.commons.io.FileUtilsTestCase.testForceMkdir()",1,1,18,127,2
"org.apache.commons.io.FileUtilsTestCase.testGetFile()",1,1,17,144,2
"org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent()",1,1,24,210,3
"org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory()",1,1,7,24,1
"org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath()",1,1,7,15,1
"org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory()",1,1,7,24,1
"org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath()",1,1,7,15,1
"org.apache.commons.io.FileUtilsTestCase.testIO276()",1,1,8,89,1
"org.apache.commons.io.FileUtilsTestCase.testIO300()",1,1,14,121,2
"org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()",1,5,116,"1,313",15
"org.apache.commons.io.FileUtilsTestCase.testIterateFiles()",1,5,27,497,6
"org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()",1,2,22,279,2
"org.apache.commons.io.FileUtilsTestCase.testListFiles()",1,5,31,612,6
"org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()",1,1,19,276,1
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()",1,1,22,325,1
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()",1,1,31,241,5
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()",1,1,5,275,1
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()",1,1,38,277,6
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()",1,1,19,247,1
"org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()",1,1,9,131,1
"org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()",1,1,31,241,5
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()",1,1,6,106,1
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()",1,2,5,149,2
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()",1,1,36,245,6
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()",1,1,6,68,1
"org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()",1,1,19,274,1
"org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()",1,1,22,151,4
"org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()",1,1,13,169,1
"org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()",1,1,9,85,1
"org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()",1,1,9,95,1
"org.apache.commons.io.FileUtilsTestCase.testReadLines()",1,1,11,111,1
"org.apache.commons.io.FileUtilsTestCase.testSizeOf()",1,1,31,174,3
"org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()",1,1,31,181,3
"org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()",1,1,25,149,3
"org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()",1,1,33,283,3
"org.apache.commons.io.FileUtilsTestCase.testToFile1()",1,1,6,64,1
"org.apache.commons.io.FileUtilsTestCase.testToFile2()",1,1,5,64,1
"org.apache.commons.io.FileUtilsTestCase.testToFile3()",1,1,4,35,1
"org.apache.commons.io.FileUtilsTestCase.testToFile4()",1,1,5,64,1
"org.apache.commons.io.FileUtilsTestCase.testToFile5()",1,1,6,48,1
"org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()",1,1,5,64,1
"org.apache.commons.io.FileUtilsTestCase.testToFiles1()",1,1,10,203,1
"org.apache.commons.io.FileUtilsTestCase.testToFiles2()",1,1,10,167,1
"org.apache.commons.io.FileUtilsTestCase.testToFiles3()",1,1,5,33,1
"org.apache.commons.io.FileUtilsTestCase.testToFiles3a()",1,1,5,36,1
"org.apache.commons.io.FileUtilsTestCase.testToFiles4()",1,1,10,64,2
"org.apache.commons.io.FileUtilsTestCase.testToURLs1()",1,1,16,284,1
"org.apache.commons.io.FileUtilsTestCase.testToURLs3a()",1,1,5,36,1
"org.apache.commons.io.FileUtilsTestCase.testTouch()",1,2,24,524,2
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()",1,1,6,68,1
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,8,76,1
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,9,83,1
"org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()",1,1,6,64,1
"org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()",1,1,6,60,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,12,114,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,13,118,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()",1,1,12,158,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,12,108,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,13,112,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()",1,1,10,123,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()",1,1,5,57,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()",1,1,12,162,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,12,114,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,13,118,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,12,118,1
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,13,122,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()",1,1,6,64,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()",1,1,6,60,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()",1,1,6,60,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,8,76,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,9,83,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,8,70,1
"org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,9,77,1
"org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,8,76,1
"org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,9,83,1
"org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()",1,1,8,70,1
"org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()",1,1,9,77,1
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()",1,1,12,91,1
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()",1,1,13,72,2
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()",1,1,12,62,2
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()",1,1,12,101,1
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()",1,1,13,72,2
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile()",1,1,3,11,1
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile()",1,1,3,11,1
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()",1,1,11,81,1
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()",1,1,20,100,2
"org.apache.commons.io.FileUtilsWaitForTestCase.FileUtilsWaitForTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FileUtilsWaitForTestCase.setUp()",1,1,5,11,1
"org.apache.commons.io.FileUtilsWaitForTestCase.tearDown()",1,1,5,11,1
"org.apache.commons.io.FileUtilsWaitForTestCase.testWaitFor()",1,1,5,33,1
"org.apache.commons.io.FilenameUtils.FilenameUtils()",1,1,6,4,1
"org.apache.commons.io.FilenameUtils.concat(String,String)",6,4,62,253,6
"org.apache.commons.io.FilenameUtils.directoryContains(String,String)",4,1,37,129,4
"org.apache.commons.io.FilenameUtils.doGetFullPath(String,boolean)",6,4,32,278,8
"org.apache.commons.io.FilenameUtils.doGetPath(String,int)",4,3,22,188,6
"org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)",12,9,93,"1,759",31
"org.apache.commons.io.FilenameUtils.equals(String,String)",1,1,14,28,1
"org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)",4,2,30,212,8
"org.apache.commons.io.FilenameUtils.equalsNormalized(String,String)",1,1,14,28,1
"org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(String,String)",1,1,16,28,1
"org.apache.commons.io.FilenameUtils.equalsOnSystem(String,String)",1,1,14,28,1
"org.apache.commons.io.FilenameUtils.getBaseName(String)",1,1,20,15,1
"org.apache.commons.io.FilenameUtils.getExtension(String)",3,2,29,102,3
"org.apache.commons.io.FilenameUtils.getFullPath(String)",1,1,28,15,1
"org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(String)",1,1,29,15,1
"org.apache.commons.io.FilenameUtils.getName(String)",2,1,24,62,2
"org.apache.commons.io.FilenameUtils.getPath(String)",1,1,25,15,1
"org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(String)",1,1,26,15,1
"org.apache.commons.io.FilenameUtils.getPrefix(String)",4,1,42,126,4
"org.apache.commons.io.FilenameUtils.getPrefixLength(String)",13,8,83,"1,020",26
"org.apache.commons.io.FilenameUtils.indexOfExtension(String)",2,1,21,96,3
"org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)",2,1,20,88,2
"org.apache.commons.io.FilenameUtils.isExtension(String,Collection<String>)",5,4,26,149,6
"org.apache.commons.io.FilenameUtils.isExtension(String,String)",3,3,21,127,4
"org.apache.commons.io.FilenameUtils.isExtension(String,String[])",5,3,26,160,6
"org.apache.commons.io.FilenameUtils.isSeparator(char)",1,1,9,39,2
"org.apache.commons.io.FilenameUtils.isSystemWindows()",1,1,8,15,1
"org.apache.commons.io.FilenameUtils.normalize(String)",1,1,43,19,1
"org.apache.commons.io.FilenameUtils.normalize(String,boolean)",1,1,48,43,2
"org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String)",1,1,44,19,1
"org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String,boolean)",1,1,47,43,2
"org.apache.commons.io.FilenameUtils.removeExtension(String)",3,2,28,93,3
"org.apache.commons.io.FilenameUtils.separatorsToSystem(String)",3,2,16,58,3
"org.apache.commons.io.FilenameUtils.separatorsToUnix(String)",2,2,12,76,3
"org.apache.commons.io.FilenameUtils.separatorsToWindows(String)",2,2,12,76,3
"org.apache.commons.io.FilenameUtils.splitOnTokens(String)",2,10,38,560,12
"org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)",1,1,25,24,1
"org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)",12,10,85,937,19
"org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(String,String)",1,1,25,24,1
"org.apache.commons.io.FilenameUtilsTestCase.FilenameUtilsTestCase(String)",1,1,7,76,1
"org.apache.commons.io.FilenameUtilsTestCase.setUp()",1,1,11,72,1
"org.apache.commons.io.FilenameUtilsTestCase.tearDown()",1,1,5,11,1
"org.apache.commons.io.FilenameUtilsTestCase.testConcat()",1,1,32,"1,120",1
"org.apache.commons.io.FilenameUtilsTestCase.testEquals()",1,1,10,103,1
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()",1,1,11,125,1
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()",1,1,23,79,4
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()",1,1,10,136,1
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()",1,1,9,114,1
"org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()",1,1,6,102,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()",1,1,9,117,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()",1,1,15,240,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()",1,1,30,602,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()",1,1,30,602,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()",1,1,14,86,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetName()",1,1,8,96,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetPath()",1,1,32,625,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()",1,1,32,630,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()",1,1,33,635,1
"org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()",1,1,34,712,1
"org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()",1,1,10,160,1
"org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()",1,1,6,69,1
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()",1,1,27,392,1
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()",1,1,32,645,1
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()",1,1,32,777,1
"org.apache.commons.io.FilenameUtilsTestCase.testNormalize()",1,1,141,"6,271",1
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()",1,1,141,"6,075",1
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()",1,1,8,79,1
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()",1,1,8,79,1
"org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()",1,1,15,237,1
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()",1,2,17,212,2
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()",1,1,9,89,1
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()",1,1,8,89,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.FilenameUtilsWildcardTestCase(String)",1,1,3,8,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals(Object[],Object[])",1,2,6,79,2
"org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(String,String,boolean)",1,1,3,34,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()",1,3,25,315,3
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()",1,1,24,427,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()",1,1,35,705,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()",1,1,32,765,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()",1,1,22,408,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()",1,1,11,294,1
"org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()",1,1,23,208,1
"org.apache.commons.io.HexDump.HexDump()",1,1,6,4,1
"org.apache.commons.io.HexDump.dump(StringBuilder,byte)",1,2,13,105,2
"org.apache.commons.io.HexDump.dump(StringBuilder,long)",1,2,14,97,2
"org.apache.commons.io.HexDump.dump(byte[],long,OutputStream,int)",3,6,71,767,11
"org.apache.commons.io.HexDumpTest.HexDumpTest(String)",1,1,8,8,1
"org.apache.commons.io.HexDumpTest.testDump()",1,19,175,"4,167",23
"org.apache.commons.io.HexDumpTest.toAscii(int)",1,1,7,66,3
"org.apache.commons.io.HexDumpTest.toHex(int)",1,1,8,114,1
"org.apache.commons.io.IOCase.IOCase(String,boolean)",1,1,10,22,1
"org.apache.commons.io.IOCase.checkCompareTo(String,String)",2,2,17,82,4
"org.apache.commons.io.IOCase.checkEndsWith(String,String)",1,1,15,62,1
"org.apache.commons.io.IOCase.checkEquals(String,String)",2,2,17,82,4
"org.apache.commons.io.IOCase.checkIndexOf(String,int,String)",4,3,26,130,4
"org.apache.commons.io.IOCase.checkRegionMatches(String,int,String)",1,1,15,60,1
"org.apache.commons.io.IOCase.checkStartsWith(String,String)",1,1,14,39,1
"org.apache.commons.io.IOCase.forName(String)",4,1,19,112,4
"org.apache.commons.io.IOCase.getName()",1,1,8,4,1
"org.apache.commons.io.IOCase.isCaseSensitive()",1,1,8,8,1
"org.apache.commons.io.IOCase.readResolve()",1,1,9,8,1
"org.apache.commons.io.IOCase.toString()",1,1,9,4,1
"org.apache.commons.io.IOCaseTestCase.IOCaseTestCase(String)",1,1,3,8,1
"org.apache.commons.io.IOCaseTestCase.serialize(IOCase)",1,1,11,76,1
"org.apache.commons.io.IOCaseTestCase.setUp()",1,1,3,4,1
"org.apache.commons.io.IOCaseTestCase.tearDown()",1,1,3,4,1
"org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()",1,1,11,257,1
"org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()",1,1,21,261,4
"org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()",1,1,8,129,1
"org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()",1,1,24,287,4
"org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()",1,1,8,125,1
"org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()",1,1,24,287,4
"org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()",1,1,8,196,2
"org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()",1,1,46,"1,084",4
"org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()",1,1,8,156,1
"org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()",1,1,45,687,7
"org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()",1,1,8,129,1
"org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()",1,1,24,287,4
"org.apache.commons.io.IOCaseTestCase.test_forName()",1,1,14,100,3
"org.apache.commons.io.IOCaseTestCase.test_getName()",1,1,5,51,1
"org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()",1,1,5,50,1
"org.apache.commons.io.IOCaseTestCase.test_serialization()",1,1,5,45,1
"org.apache.commons.io.IOCaseTestCase.test_toString()",1,1,5,51,1
"org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause(String,Throwable)",1,1,16,19,1
"org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause(Throwable)",1,2,14,38,2
"org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionStringThrowable()",1,1,8,38,1
"org.apache.commons.io.IOExceptionWithCauseTestCase.testIOExceptionThrowable()",1,1,8,34,1
"org.apache.commons.io.IOExceptionWithCauseTestCase.validate(Throwable,Throwable,String)",1,1,5,41,1
"org.apache.commons.io.IOUtils.IOUtils()",1,1,6,4,1
"org.apache.commons.io.IOUtils.close(URLConnection)",1,2,11,22,2
"org.apache.commons.io.IOUtils.closeQuietly(Closeable)",1,2,32,36,3
"org.apache.commons.io.IOUtils.closeQuietly(InputStream)",1,1,26,11,1
"org.apache.commons.io.IOUtils.closeQuietly(OutputStream)",1,1,27,11,1
"org.apache.commons.io.IOUtils.closeQuietly(Reader)",1,1,26,11,1
"org.apache.commons.io.IOUtils.closeQuietly(Selector)",1,2,32,36,3
"org.apache.commons.io.IOUtils.closeQuietly(ServerSocket)",1,2,32,36,3
"org.apache.commons.io.IOUtils.closeQuietly(Socket)",1,2,32,36,3
"org.apache.commons.io.IOUtils.closeQuietly(Writer)",1,1,25,11,1
"org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)",3,2,33,190,5
"org.apache.commons.io.IOUtils.contentEquals(Reader,Reader)",3,2,30,150,3
"org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader,Reader)",1,5,26,172,6
"org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)",2,1,26,70,2
"org.apache.commons.io.IOUtils.copy(InputStream,Writer)",1,1,19,24,1
"org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)",1,1,20,38,1
"org.apache.commons.io.IOUtils.copy(InputStream,Writer,String)",1,1,25,28,1
"org.apache.commons.io.IOUtils.copy(Reader,OutputStream)",1,1,23,24,1
"org.apache.commons.io.IOUtils.copy(Reader,OutputStream,Charset)",1,1,30,46,1
"org.apache.commons.io.IOUtils.copy(Reader,OutputStream,String)",1,1,29,28,1
"org.apache.commons.io.IOUtils.copy(Reader,Writer)",2,1,25,70,2
"org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)",1,1,20,38,1
"org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,byte[])",1,2,26,104,2
"org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,long,long)",1,1,23,55,1
"org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,long,long,byte[])",2,5,45,375,8
"org.apache.commons.io.IOUtils.copyLarge(Reader,Writer)",1,1,18,38,1
"org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,char[])",1,2,24,104,2
"org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,long,long)",1,1,23,64,1
"org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,long,long,char[])",2,5,43,366,8
"org.apache.commons.io.IOUtils.lineIterator(InputStream,Charset)",1,1,33,26,1
"org.apache.commons.io.IOUtils.lineIterator(InputStream,String)",1,1,36,24,1
"org.apache.commons.io.IOUtils.lineIterator(Reader)",1,1,30,11,1
"org.apache.commons.io.IOUtils.read(InputStream,byte[])",1,1,15,41,1
"org.apache.commons.io.IOUtils.read(InputStream,byte[],int,int)",4,2,29,213,4
"org.apache.commons.io.IOUtils.read(Reader,char[])",1,1,15,41,1
"org.apache.commons.io.IOUtils.read(Reader,char[],int,int)",4,2,29,213,4
"org.apache.commons.io.IOUtils.readFully(InputStream,byte[])",1,1,17,48,1
"org.apache.commons.io.IOUtils.readFully(InputStream,byte[],int,int)",2,1,22,108,2
"org.apache.commons.io.IOUtils.readFully(Reader,char[])",1,1,17,48,1
"org.apache.commons.io.IOUtils.readFully(Reader,char[],int,int)",2,1,22,108,2
"org.apache.commons.io.IOUtils.readLines(InputStream)",1,1,16,19,1
"org.apache.commons.io.IOUtils.readLines(InputStream,Charset)",1,1,18,33,1
"org.apache.commons.io.IOUtils.readLines(InputStream,String)",1,1,23,24,1
"org.apache.commons.io.IOUtils.readLines(Reader)",1,2,23,78,2
"org.apache.commons.io.IOUtils.skip(InputStream,long)",4,2,38,235,5
"org.apache.commons.io.IOUtils.skip(Reader,long)",4,2,38,235,5
"org.apache.commons.io.IOUtils.skipFully(InputStream,long)",3,1,24,127,3
"org.apache.commons.io.IOUtils.skipFully(Reader,long)",2,1,21,82,2
"org.apache.commons.io.IOUtils.toBufferedInputStream(InputStream)",1,1,24,15,1
"org.apache.commons.io.IOUtils.toBufferedReader(Reader)",1,1,12,20,2
"org.apache.commons.io.IOUtils.toByteArray(InputStream)",1,1,16,36,1
"org.apache.commons.io.IOUtils.toByteArray(InputStream,int)",4,2,29,275,6
"org.apache.commons.io.IOUtils.toByteArray(InputStream,long)",2,1,22,85,2
"org.apache.commons.io.IOUtils.toByteArray(Reader)",1,1,15,24,1
"org.apache.commons.io.IOUtils.toByteArray(Reader,Charset)",1,1,19,41,1
"org.apache.commons.io.IOUtils.toByteArray(Reader,String)",1,1,23,28,1
"org.apache.commons.io.IOUtils.toByteArray(String)",1,1,16,19,1
"org.apache.commons.io.IOUtils.toByteArray(URI)",1,1,15,24,1
"org.apache.commons.io.IOUtils.toByteArray(URL)",1,1,20,46,1
"org.apache.commons.io.IOUtils.toByteArray(URLConnection)",1,1,20,46,1
"org.apache.commons.io.IOUtils.toCharArray(InputStream)",1,1,16,24,1
"org.apache.commons.io.IOUtils.toCharArray(InputStream,Charset)",1,1,20,41,1
"org.apache.commons.io.IOUtils.toCharArray(InputStream,String)",1,1,23,28,1
"org.apache.commons.io.IOUtils.toCharArray(Reader)",1,1,17,36,1
"org.apache.commons.io.IOUtils.toInputStream(CharSequence)",1,1,11,15,1
"org.apache.commons.io.IOUtils.toInputStream(CharSequence,Charset)",1,1,12,19,1
"org.apache.commons.io.IOUtils.toInputStream(CharSequence,String)",1,1,19,24,1
"org.apache.commons.io.IOUtils.toInputStream(String)",1,1,11,15,1
"org.apache.commons.io.IOUtils.toInputStream(String,Charset)",1,1,12,24,1
"org.apache.commons.io.IOUtils.toInputStream(String,String)",1,1,20,38,1
"org.apache.commons.io.IOUtils.toString(InputStream)",1,1,15,19,1
"org.apache.commons.io.IOUtils.toString(InputStream,Charset)",1,1,19,36,1
"org.apache.commons.io.IOUtils.toString(InputStream,String)",1,1,23,24,1
"org.apache.commons.io.IOUtils.toString(Reader)",1,1,16,31,1
"org.apache.commons.io.IOUtils.toString(URI)",1,1,12,19,1
"org.apache.commons.io.IOUtils.toString(URI,Charset)",1,1,14,28,1
"org.apache.commons.io.IOUtils.toString(URI,String)",1,1,17,24,1
"org.apache.commons.io.IOUtils.toString(URL)",1,1,12,19,1
"org.apache.commons.io.IOUtils.toString(URL,Charset)",1,1,19,46,1
"org.apache.commons.io.IOUtils.toString(URL,String)",1,1,17,24,1
"org.apache.commons.io.IOUtils.toString(byte[])",1,1,14,22,1
"org.apache.commons.io.IOUtils.toString(byte[],String)",1,1,16,28,1
"org.apache.commons.io.IOUtils.write(CharSequence,OutputStream)",1,1,17,24,1
"org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,Charset)",1,2,18,46,2
"org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,String)",1,1,22,28,1
"org.apache.commons.io.IOUtils.write(CharSequence,Writer)",1,2,14,41,2
"org.apache.commons.io.IOUtils.write(String,OutputStream)",1,1,17,24,1
"org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)",1,2,18,51,2
"org.apache.commons.io.IOUtils.write(String,OutputStream,String)",1,1,23,28,1
"org.apache.commons.io.IOUtils.write(String,Writer)",1,2,14,36,2
"org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream)",1,1,19,24,1
"org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream,String)",1,2,26,57,2
"org.apache.commons.io.IOUtils.write(StringBuffer,Writer)",1,2,17,41,2
"org.apache.commons.io.IOUtils.write(byte[],OutputStream)",1,2,16,41,2
"org.apache.commons.io.IOUtils.write(byte[],Writer)",1,1,16,31,1
"org.apache.commons.io.IOUtils.write(byte[],Writer,Charset)",1,2,19,60,2
"org.apache.commons.io.IOUtils.write(byte[],Writer,String)",1,1,23,36,1
"org.apache.commons.io.IOUtils.write(char[],OutputStream)",1,1,18,31,1
"org.apache.commons.io.IOUtils.write(char[],OutputStream,Charset)",1,2,20,66,2
"org.apache.commons.io.IOUtils.write(char[],OutputStream,String)",1,1,25,36,1
"org.apache.commons.io.IOUtils.write(char[],Writer)",1,2,16,41,2
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream)",1,1,16,28,1
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,Charset)",2,3,29,149,5
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,String)",1,1,23,33,1
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,Writer)",2,3,26,114,5
"org.apache.commons.io.IOUtilsCopyTestCase.IOUtilsCopyTestCase(String)",1,1,3,8,1
"org.apache.commons.io.IOUtilsCopyTestCase.setUp()",1,1,3,4,1
"org.apache.commons.io.IOUtilsCopyTestCase.tearDown()",1,1,3,4,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()",1,1,12,176,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()",1,1,14,110,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()",1,1,7,33,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()",1,1,7,38,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()",1,1,14,185,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()",1,1,15,202,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()",1,1,13,192,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()",1,1,9,70,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()",1,1,7,43,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()",1,1,9,64,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()",1,1,7,38,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()",1,1,17,136,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()",1,1,14,149,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()",1,1,12,142,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()",1,1,8,55,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()",1,1,9,68,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()",1,1,8,50,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()",1,1,9,62,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()",1,1,15,206,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()",1,1,14,110,1
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()",1,1,9,64,2
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()",1,1,9,62,2
"org.apache.commons.io.IOUtilsTestCase.IOUtilsTestCase(String)",1,1,3,8,1
"org.apache.commons.io.IOUtilsTestCase.assertEqualContent(byte[],byte[])",1,1,4,26,1
"org.apache.commons.io.IOUtilsTestCase.setUp()",1,2,22,305,4
"org.apache.commons.io.IOUtilsTestCase.tearDown()",1,2,10,60,2
"org.apache.commons.io.IOUtilsTestCase.testByteArrayToOutputStream()",1,1,23,153,1
"org.apache.commons.io.IOUtilsTestCase.testByteArrayToString()",1,1,13,77,1
"org.apache.commons.io.IOUtilsTestCase.testByteArrayToWriter()",1,1,23,153,1
"org.apache.commons.io.IOUtilsTestCase.testCharExtraLength()",1,1,23,211,1
"org.apache.commons.io.IOUtilsTestCase.testCharFullLength()",1,1,22,213,1
"org.apache.commons.io.IOUtilsTestCase.testCharNoSkip()",1,1,22,209,1
"org.apache.commons.io.IOUtilsTestCase.testCharSequenceToInputStream()",1,1,20,166,1
"org.apache.commons.io.IOUtilsTestCase.testCharSkip()",1,1,22,213,1
"org.apache.commons.io.IOUtilsTestCase.testCharSkipInvalid()",1,1,18,100,2
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietlyNullSelector()",1,1,4,11,1
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietlySelector()",1,1,9,31,2
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietlySelectorIOException()",1,1,4,28,1
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietlySelectorTwice()",1,1,10,38,2
"org.apache.commons.io.IOUtilsTestCase.testCloseableCloseQuietlyOnException()",1,1,3,23,1
"org.apache.commons.io.IOUtilsTestCase.testConstants()",1,2,14,125,2
"org.apache.commons.io.IOUtilsTestCase.testContentEqualsIgnoreEOL()",1,1,19,257,1
"org.apache.commons.io.IOUtilsTestCase.testContentEqualsReaderReader()",1,1,7,116,1
"org.apache.commons.io.IOUtilsTestCase.testExtraLength()",1,1,23,204,1
"org.apache.commons.io.IOUtilsTestCase.testFullLength()",1,1,22,206,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToBufferedInputStream()",1,1,13,131,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray()",1,1,12,118,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray_IllegalSize()",1,2,12,107,2
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray_LongSize()",1,2,12,108,2
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray_NegativeSize()",1,2,12,96,2
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray_Size()",1,1,12,149,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToByteArray_ZeroSize()",1,1,10,87,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArray()",1,1,12,118,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToCharArrayWithEncoding()",1,1,12,124,1
"org.apache.commons.io.IOUtilsTestCase.testInputStreamToString()",1,1,11,97,1
"org.apache.commons.io.IOUtilsTestCase.testNoSkip()",1,1,22,202,1
"org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()",1,1,16,168,1
"org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()",1,1,16,174,1
"org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()",1,1,16,173,1
"org.apache.commons.io.IOUtilsTestCase.testReadReader()",1,1,20,212,3
"org.apache.commons.io.IOUtilsTestCase.testReadReaderWithOffset()",1,1,7,76,1
"org.apache.commons.io.IOUtilsTestCase.testReadStream()",1,1,20,212,3
"org.apache.commons.io.IOUtilsTestCase.testReadStreamWithOffset()",1,1,8,121,1
"org.apache.commons.io.IOUtilsTestCase.testReaderToCharArray()",1,1,11,91,1
"org.apache.commons.io.IOUtilsTestCase.testReaderToString()",1,1,10,72,1
"org.apache.commons.io.IOUtilsTestCase.testServerSocketCloseQuietly()",1,1,4,18,1
"org.apache.commons.io.IOUtilsTestCase.testServerSocketCloseQuietlyOnException()",1,1,4,25,1
"org.apache.commons.io.IOUtilsTestCase.testSkip()",1,1,22,206,1
"org.apache.commons.io.IOUtilsTestCase.testSkipFileInput()",1,1,10,114,1
"org.apache.commons.io.IOUtilsTestCase.testSkipFileReader()",1,1,10,114,1
"org.apache.commons.io.IOUtilsTestCase.testSkipInvalid()",1,1,18,100,2
"org.apache.commons.io.IOUtilsTestCase.testSkipReader()",1,1,19,156,3
"org.apache.commons.io.IOUtilsTestCase.testSkipStream()",1,1,19,156,3
"org.apache.commons.io.IOUtilsTestCase.testSocketCloseQuietly()",1,1,4,13,1
"org.apache.commons.io.IOUtilsTestCase.testSocketCloseQuietlyOnException()",1,1,4,23,1
"org.apache.commons.io.IOUtilsTestCase.testStringToByteArray()",1,1,13,77,1
"org.apache.commons.io.IOUtilsTestCase.testStringToInputStream()",1,1,20,144,1
"org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()",1,1,28,136,1
"org.apache.commons.io.IOUtilsTestCase.testStringToWriter()",1,1,23,147,1
"org.apache.commons.io.IOUtilsTestCase.testToByteArrayFromURI()",1,1,5,43,1
"org.apache.commons.io.IOUtilsTestCase.testToByteArrayFromURL()",1,1,5,48,1
"org.apache.commons.io.IOUtilsTestCase.testToByteArrayFromURLConnection()",1,1,10,77,1
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()",1,1,8,102,1
"org.apache.commons.io.IOUtilsTestCase.testURIToString(String)",1,1,6,57,1
"org.apache.commons.io.IOUtilsTestCase.testURIToStringNoEncoding()",1,1,6,51,1
"org.apache.commons.io.IOUtilsTestCase.testURIToStringNullEncoding()",1,1,3,11,1
"org.apache.commons.io.IOUtilsTestCase.testURIToStringUsAciiEncoding()",1,1,3,11,1
"org.apache.commons.io.IOUtilsTestCase.testURLToString(String)",1,1,6,62,1
"org.apache.commons.io.IOUtilsTestCase.testURLToStringNoEncoding()",1,1,6,57,1
"org.apache.commons.io.IOUtilsTestCase.testURLToStringNullEncoding()",1,1,3,11,1
"org.apache.commons.io.IOUtilsTestCase.testURLToStringUsAciiEncoding()",1,1,3,11,1
"org.apache.commons.io.IOUtilsWriteTestCase.IOUtilsWriteTestCase(String)",1,1,3,8,1
"org.apache.commons.io.IOUtilsWriteTestCase.setUp()",1,1,3,4,1
"org.apache.commons.io.IOUtilsWriteTestCase.tearDown()",1,1,3,4,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()",1,1,14,150,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()",1,1,14,161,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()",1,1,8,91,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()",1,1,13,155,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()",1,1,12,140,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()",1,1,8,64,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()",1,1,8,85,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()",1,1,12,133,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()",1,1,8,58,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()",1,1,15,166,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()",1,1,9,100,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()",1,1,13,149,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()",1,1,8,58,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()",1,1,10,114,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()",1,1,8,84,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()",1,1,6,28,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()",1,1,11,131,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()",1,1,12,144,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()",1,1,9,106,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()",1,1,10,138,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()",1,1,6,33,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()",1,1,9,100,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()",1,1,6,28,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()",1,1,11,138,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()",1,1,12,151,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()",1,1,8,84,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()",1,1,7,48,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()",1,1,8,84,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()",1,1,10,144,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()",1,1,7,48,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()",1,1,12,153,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()",1,1,9,100,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()",1,1,7,48,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()",1,1,11,136,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()",1,1,12,149,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()",1,1,8,78,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullStream()",1,1,7,46,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()",1,1,8,78,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()",1,1,10,142,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullStream()",1,1,7,46,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()",1,1,12,151,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()",1,1,9,94,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullStream()",1,1,7,46,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()",1,1,11,131,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()",1,1,12,144,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()",1,1,8,78,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()",1,1,7,43,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()",1,1,8,78,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()",1,1,10,138,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()",1,1,7,43,2
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()",1,1,12,147,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()",1,1,9,94,1
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()",1,1,7,43,2
"org.apache.commons.io.LineIterator.LineIterator(Reader)",2,1,16,70,3
"org.apache.commons.io.LineIterator.close()",1,1,12,24,1
"org.apache.commons.io.LineIterator.closeQuietly(LineIterator)",1,2,10,26,2
"org.apache.commons.io.LineIterator.hasNext()",6,6,31,180,7
"org.apache.commons.io.LineIterator.isValidLine(String)",1,1,9,8,1
"org.apache.commons.io.LineIterator.next()",1,1,9,4,1
"org.apache.commons.io.LineIterator.nextLine()",2,1,14,41,2
"org.apache.commons.io.LineIterator.remove()",1,1,8,11,1
"org.apache.commons.io.LineIteratorTestCase.LineIteratorTestCase(String)",1,1,3,8,1
"org.apache.commons.io.LineIteratorTestCase.assertLines(List<String>,LineIterator)",1,2,11,131,2
"org.apache.commons.io.LineIteratorTestCase.createLinesFile(File,String,int)",1,1,8,36,1
"org.apache.commons.io.LineIteratorTestCase.createLinesFile(File,int)",1,1,8,31,1
"org.apache.commons.io.LineIteratorTestCase.createStringLines(int)",1,2,13,68,2
"org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(int)",1,2,41,393,5
"org.apache.commons.io.LineIteratorTestCase.setUp()",1,2,10,34,2
"org.apache.commons.io.LineIteratorTestCase.tearDown()",1,1,6,11,1
"org.apache.commons.io.LineIteratorTestCase.testCloseEarly()",1,1,46,259,5
"org.apache.commons.io.LineIteratorTestCase.testConstructor()",1,1,12,24,2
"org.apache.commons.io.LineIteratorTestCase.testFiltering(List<String>,Reader)",1,2,5,541,6
"org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()",1,1,9,76,1
"org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()",1,1,10,72,1
"org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()",1,1,18,101,2
"org.apache.commons.io.LineIteratorTestCase.testMissingFile()",1,1,16,73,2
"org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()",1,1,10,51,1
"org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()",1,1,11,66,1
"org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()",1,1,11,66,1
"org.apache.commons.io.LineIteratorTestCase.testNextOnly()",1,2,19,213,2
"org.apache.commons.io.LineIteratorTestCase.testNextWithException()",1,1,4,66,2
"org.apache.commons.io.LineIteratorTestCase.testOneLines()",1,1,7,11,1
"org.apache.commons.io.LineIteratorTestCase.testThreeLines()",1,1,7,11,1
"org.apache.commons.io.LineIteratorTestCase.testTwoLines()",1,1,7,11,1
"org.apache.commons.io.LineIteratorTestCase.testValidEncoding()",1,2,20,143,2
"org.apache.commons.io.LineIteratorTestCase.testZeroLines()",1,1,7,11,1
"org.apache.commons.io.SelectorAdapter.close()",1,1,3,4,1
"org.apache.commons.io.SelectorAdapter.isOpen()",1,1,4,8,1
"org.apache.commons.io.SelectorAdapter.keys()",1,1,4,4,1
"org.apache.commons.io.SelectorAdapter.provider()",1,1,4,4,1
"org.apache.commons.io.SelectorAdapter.select()",1,1,4,11,1
"org.apache.commons.io.SelectorAdapter.select(long)",1,1,4,15,1
"org.apache.commons.io.SelectorAdapter.selectNow()",1,1,4,11,1
"org.apache.commons.io.SelectorAdapter.selectedKeys()",1,1,4,4,1
"org.apache.commons.io.SelectorAdapter.wakeup()",1,1,4,4,1
"org.apache.commons.io.TaggedIOException.TaggedIOException(IOException,Serializable)",1,1,10,26,1
"org.apache.commons.io.TaggedIOException.getCause()",1,1,10,8,1
"org.apache.commons.io.TaggedIOException.getTag()",1,1,8,4,1
"org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)",1,3,33,44,3
"org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)",2,2,28,36,2
"org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()",1,1,9,97,1
"org.apache.commons.io.ThreadMonitor.ThreadMonitor(Thread,long)",1,1,10,22,1
"org.apache.commons.io.ThreadMonitor.run()",1,1,14,24,2
"org.apache.commons.io.ThreadMonitor.start(Thread,long)",1,2,19,95,2
"org.apache.commons.io.ThreadMonitor.start(long)",1,1,11,19,1
"org.apache.commons.io.ThreadMonitor.stop(Thread)",1,2,10,26,2
"org.apache.commons.io.ThreadMonitorTestCase.ThreadMonitorTestCase(String)",1,1,3,8,1
"org.apache.commons.io.ThreadMonitorTestCase.testCompletedWithoutTimeout()",1,2,12,43,2
"org.apache.commons.io.ThreadMonitorTestCase.testNoTimeout()",1,3,23,142,3
"org.apache.commons.io.ThreadMonitorTestCase.testTimeout()",1,1,13,43,2
"org.apache.commons.io.comparator.AbstractFileComparator.sort(File...)",1,2,16,30,2
"org.apache.commons.io.comparator.AbstractFileComparator.sort(List<File>)",1,2,16,30,2
"org.apache.commons.io.comparator.AbstractFileComparator.toString()",1,1,9,8,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.ComparatorAbstractTestCase(String)",1,1,7,8,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp()",1,1,6,19,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.tearDown()",1,1,11,60,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()",1,1,8,100,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testReverseComparator()",1,1,8,100,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()",1,1,13,126,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()",1,1,6,15,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()",1,1,13,137,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()",1,1,6,15,1
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()",1,1,7,43,1
"org.apache.commons.io.comparator.CompositeFileComparator.CompositeFileComparator(Comparator<File>...)",1,2,14,87,2
"org.apache.commons.io.comparator.CompositeFileComparator.CompositeFileComparator(Iterable<Comparator<File>>)",1,3,17,94,3
"org.apache.commons.io.comparator.CompositeFileComparator.compare(File,File)",3,2,18,68,3
"org.apache.commons.io.comparator.CompositeFileComparator.toString()",1,3,19,158,3
"org.apache.commons.io.comparator.CompositeFileComparatorTest.CompositeFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()",1,1,17,185,1
"org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorArrayNull()",1,1,9,92,1
"org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterable()",1,1,12,149,1
"org.apache.commons.io.comparator.CompositeFileComparatorTest.testConstructorIterableNull()",1,1,9,92,1
"org.apache.commons.io.comparator.DefaultFileComparator.compare(File,File)",1,1,11,15,1
"org.apache.commons.io.comparator.DefaultFileComparatorTest.DefaultFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp()",1,1,11,85,1
"org.apache.commons.io.comparator.DirectoryFileComparator.compare(File,File)",1,1,11,22,1
"org.apache.commons.io.comparator.DirectoryFileComparator.getType(File)",2,1,13,31,2
"org.apache.commons.io.comparator.DirectoryFileComparatorTest.DirectoryFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()",1,1,12,114,1
"org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortArray()",1,1,7,2,1
"org.apache.commons.io.comparator.DirectoryFileComparatorTest.testSortList()",1,1,7,2,1
"org.apache.commons.io.comparator.ExtensionFileComparator.ExtensionFileComparator()",1,1,6,8,1
"org.apache.commons.io.comparator.ExtensionFileComparator.ExtensionFileComparator(IOCase)",1,1,8,22,2
"org.apache.commons.io.comparator.ExtensionFileComparator.compare(File,File)",1,1,16,44,1
"org.apache.commons.io.comparator.ExtensionFileComparator.toString()",1,1,9,19,1
"org.apache.commons.io.comparator.ExtensionFileComparatorTest.ExtensionFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp()",1,1,11,87,1
"org.apache.commons.io.comparator.ExtensionFileComparatorTest.testCaseSensitivity()",1,1,13,288,1
"org.apache.commons.io.comparator.LastModifiedFileComparator.compare(File,File)",3,1,21,100,3
"org.apache.commons.io.comparator.LastModifiedFileComparatorTest.LastModifiedFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp()",1,3,34,325,5
"org.apache.commons.io.comparator.NameFileComparator.NameFileComparator()",1,1,6,8,1
"org.apache.commons.io.comparator.NameFileComparator.NameFileComparator(IOCase)",1,1,8,22,2
"org.apache.commons.io.comparator.NameFileComparator.compare(File,File)",1,1,13,26,1
"org.apache.commons.io.comparator.NameFileComparator.toString()",1,1,9,19,1
"org.apache.commons.io.comparator.NameFileComparatorTest.NameFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.NameFileComparatorTest.setUp()",1,1,11,87,1
"org.apache.commons.io.comparator.NameFileComparatorTest.testCaseSensitivity()",1,1,13,288,1
"org.apache.commons.io.comparator.PathFileComparator.PathFileComparator()",1,1,6,8,1
"org.apache.commons.io.comparator.PathFileComparator.PathFileComparator(IOCase)",1,1,8,22,2
"org.apache.commons.io.comparator.PathFileComparator.compare(File,File)",1,1,14,26,1
"org.apache.commons.io.comparator.PathFileComparator.toString()",1,1,9,19,1
"org.apache.commons.io.comparator.PathFileComparatorTest.PathFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.PathFileComparatorTest.setUp()",1,1,11,85,1
"org.apache.commons.io.comparator.PathFileComparatorTest.testCaseSensitivity()",1,1,13,288,1
"org.apache.commons.io.comparator.ReverseComparator.ReverseComparator(Comparator<File>)",2,1,11,36,2
"org.apache.commons.io.comparator.ReverseComparator.compare(File,File)",1,1,11,19,1
"org.apache.commons.io.comparator.ReverseComparator.toString()",1,1,9,24,1
"org.apache.commons.io.comparator.SizeFileComparator.SizeFileComparator()",1,1,6,8,1
"org.apache.commons.io.comparator.SizeFileComparator.SizeFileComparator(boolean)",1,1,14,11,1
"org.apache.commons.io.comparator.SizeFileComparator.compare(File,File)",3,7,33,257,9
"org.apache.commons.io.comparator.SizeFileComparator.toString()",1,1,9,19,1
"org.apache.commons.io.comparator.SizeFileComparatorTest.SizeFileComparatorTest(String)",1,1,8,8,1
"org.apache.commons.io.comparator.SizeFileComparatorTest.setUp()",1,1,22,247,1
"org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()",1,1,8,93,1
"org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()",1,1,8,66,1
"org.apache.commons.io.filefilter.AbstractFileFilter.accept(File)",1,1,9,22,1
"org.apache.commons.io.filefilter.AbstractFileFilter.accept(File,String)",1,1,10,19,1
"org.apache.commons.io.filefilter.AbstractFileFilter.toString()",1,1,9,8,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(Date)",1,1,9,11,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(Date,boolean)",1,1,11,19,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(File)",1,1,10,11,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(File,boolean)",1,1,13,19,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(long)",1,1,9,15,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(long,boolean)",1,1,12,26,1
"org.apache.commons.io.filefilter.AgeFileFilter.accept(File)",1,1,17,34,2
"org.apache.commons.io.filefilter.AgeFileFilter.toString()",1,1,10,38,2
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter()",1,1,8,8,1
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter(IOFileFilter,IOFileFilter)",2,1,15,76,3
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter(List<IOFileFilter>)",1,1,14,46,2
"org.apache.commons.io.filefilter.AndFileFilter.accept(File)",4,2,15,80,4
"org.apache.commons.io.filefilter.AndFileFilter.accept(File,String)",4,2,15,89,4
"org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(IOFileFilter)",1,1,6,19,1
"org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()",1,1,6,11,1
"org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(IOFileFilter)",1,1,6,24,1
"org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(List<IOFileFilter>)",1,1,7,30,1
"org.apache.commons.io.filefilter.AndFileFilter.toString()",1,5,22,221,5
"org.apache.commons.io.filefilter.AndFileFilterTestCase.AndFileFilterTestCase(String)",1,1,3,11,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingAdd(List<IOFileFilter>)",1,2,8,74,2
"org.apache.commons.io.filefilter.AndFileFilterTestCase.buildFilterUsingConstructor(List<IOFileFilter>)",1,1,4,11,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getConditionalFileFilter()",1,1,4,4,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getDefaultWorkingPath()",1,1,4,4,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getFalseResults()",1,1,4,11,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getFileResults()",1,1,4,8,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getFilenameResults()",1,1,4,8,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getTestFilters()",1,1,4,8,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getTrueResults()",1,1,4,11,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.getWorkingPathNamePropertyKey()",1,1,4,4,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.setUp()",1,1,5,19,1
"org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()",1,1,185,"2,708",1
"org.apache.commons.io.filefilter.CanReadFileFilter.CanReadFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.CanReadFileFilter.accept(File)",1,1,11,11,1
"org.apache.commons.io.filefilter.CanWriteFileFilter.CanWriteFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.CanWriteFileFilter.accept(File)",1,1,11,11,1
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.ConditionalFileFilterAbstractTestCase(String)",1,1,3,11,1
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.setUp()",1,1,13,212,1
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd()",1,3,17,285,3
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingAdd()",1,2,28,528,2
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testFilterBuiltUsingConstructor()",1,2,28,528,2
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testNoFilters()",1,1,6,82,1
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testRemove()",1,2,13,210,2
"org.apache.commons.io.filefilter.DelegateFileFilter.DelegateFileFilter(FileFilter)",2,1,12,48,2
"org.apache.commons.io.filefilter.DelegateFileFilter.DelegateFileFilter(FilenameFilter)",2,1,12,48,2
"org.apache.commons.io.filefilter.DelegateFileFilter.accept(File)",2,2,14,53,2
"org.apache.commons.io.filefilter.DelegateFileFilter.accept(File,String)",2,2,15,62,2
"org.apache.commons.io.filefilter.DelegateFileFilter.toString()",1,2,10,50,2
"org.apache.commons.io.filefilter.DirectoryFileFilter.DirectoryFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.DirectoryFileFilter.accept(File)",1,1,10,11,1
"org.apache.commons.io.filefilter.EmptyFileFilter.EmptyFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.EmptyFileFilter.accept(File)",2,2,16,85,3
"org.apache.commons.io.filefilter.FalseFileFilter.FalseFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.FalseFileFilter.accept(File)",1,1,9,8,1
"org.apache.commons.io.filefilter.FalseFileFilter.accept(File,String)",1,1,10,8,1
"org.apache.commons.io.filefilter.FileFileFilter.FileFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.FileFileFilter.accept(File)",1,1,10,11,1
"org.apache.commons.io.filefilter.FileFilterTestCase.FileFilterTestCase(String)",1,1,3,8,1
"org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(IOFileFilter,File,boolean)",1,4,17,294,4
"org.apache.commons.io.filefilter.FileFilterTestCase.setUp()",1,1,4,8,1
"org.apache.commons.io.filefilter.FileFilterTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()",1,3,51,775,5
"org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()",1,1,24,302,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()",1,1,9,102,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()",1,1,10,116,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()",1,1,20,140,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testDelegation()",1,1,4,25,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()",1,1,51,820,4
"org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()",1,1,11,151,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()",1,1,21,237,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testEnsureTestCoverage()",1,1,3,8,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()",1,1,7,79,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()",1,1,8,129,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()",1,1,9,125,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()",1,1,10,132,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()",1,1,12,85,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()",1,1,24,123,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()",1,1,13,97,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()",1,1,13,94,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()",1,1,22,89,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()",1,1,12,82,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()",1,1,13,100,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()",1,1,22,96,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()",1,1,12,82,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()",1,2,9,108,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()",1,1,27,423,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()",1,1,23,359,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()",1,1,24,359,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()",1,1,23,309,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterValidation()",1,1,38,162,7
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()",1,1,22,298,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()",1,1,20,226,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()",1,1,20,226,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()",1,1,22,298,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()",1,1,47,940,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()",1,1,13,60,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()",1,1,8,33,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()",1,1,8,33,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testNot()",1,1,11,93,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testNullFilters()",1,1,14,47,3
"org.apache.commons.io.filefilter.FileFilterTestCase.testOr()",1,1,30,475,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()",1,1,39,630,4
"org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()",1,1,44,628,5
"org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()",1,1,36,537,2
"org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()",1,1,39,599,4
"org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()",1,1,42,579,5
"org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()",1,1,7,79,1
"org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()",1,1,60,"1,325",4
"org.apache.commons.io.filefilter.FileFilterUtils.FileFilterUtils()",1,1,5,0,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date)",1,1,12,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date,boolean)",1,1,12,19,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File)",1,1,13,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File,boolean)",1,1,13,19,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)",1,1,12,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)",1,1,12,24,1
"org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter...)",1,1,14,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(IOFileFilter,IOFileFilter)",1,1,14,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FileFilter)",1,1,11,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FilenameFilter)",1,1,11,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()",1,1,9,8,1
"org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()",1,1,9,8,1
"org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()",1,1,9,8,1
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,File...)",5,3,44,168,6
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,Iterable<File>)",1,1,30,36,1
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,Iterable<File>,T)",5,4,39,135,6
"org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,File...)",1,1,29,24,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,Iterable<File>)",1,1,28,19,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,File...)",1,1,30,28,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,Iterable<File>)",1,1,29,19,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String)",1,1,18,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String,long)",1,1,20,19,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])",1,1,18,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)",1,1,20,24,1
"org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(IOFileFilter)",2,2,16,43,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(IOFileFilter)",2,1,14,38,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(IOFileFilter)",2,1,14,38,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(IOFileFilter)",2,2,16,43,2
"org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String)",1,1,10,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String,IOCase)",1,1,12,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(IOFileFilter)",1,1,10,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.or(IOFileFilter...)",1,1,14,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(IOFileFilter,IOFileFilter)",1,1,14,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String)",1,1,10,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String,IOCase)",1,1,12,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)",1,1,11,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)",1,1,12,24,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)",1,1,15,59,1
"org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String)",1,1,10,11,1
"org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String,IOCase)",1,1,12,15,1
"org.apache.commons.io.filefilter.FileFilterUtils.toList(IOFileFilter...)",4,2,22,162,4
"org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()",1,1,9,8,1
"org.apache.commons.io.filefilter.HiddenFileFilter.HiddenFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.HiddenFileFilter.accept(File)",1,1,11,11,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.IOFileFilterAbstractTestCase(String)",1,1,7,11,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter.accept(File)",1,1,5,24,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter.accept(File,String)",1,1,5,28,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter.isInvoked()",1,1,3,11,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter.reset()",1,1,3,8,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter.setInvoked(boolean)",1,1,3,15,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter.accept(File)",1,1,5,24,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter.accept(File,String)",1,1,5,28,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter.isInvoked()",1,1,3,11,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter.reset()",1,1,3,8,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter.setInvoked(boolean)",1,1,3,15,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(int,TesterFalseFileFilter[],boolean[])",1,2,5,125,2
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(int,IOFileFilter,File,boolean)",1,1,7,110,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(int,IOFileFilter,File,boolean)",1,1,8,127,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering(int,IOFileFilter,File,boolean)",1,4,18,340,4
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(int,TesterTrueFileFilter[],boolean[])",1,2,5,125,2
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(String,String)",1,1,5,26,1
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters(TesterFalseFileFilter[])",1,3,7,31,3
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters(TesterTrueFileFilter[])",1,3,7,31,3
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(String)",1,1,24,11,1
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(String,long)",4,1,33,131,4
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(byte[])",1,1,27,15,1
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(byte[],long)",4,1,44,181,4
"org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(File)",3,4,37,230,6
"org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()",1,1,16,93,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(List<String>)",1,1,10,11,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(List<String>,IOCase)",2,1,15,85,3
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String)",1,1,9,11,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String,IOCase)",2,1,14,70,3
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String[])",1,1,12,11,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String[],IOCase)",2,1,18,112,3
"org.apache.commons.io.filefilter.NameFileFilter.accept(File)",3,2,16,62,3
"org.apache.commons.io.filefilter.NameFileFilter.accept(File,String)",3,2,16,46,3
"org.apache.commons.io.filefilter.NameFileFilter.toString()",1,4,21,176,4
"org.apache.commons.io.filefilter.NotFileFilter.NotFileFilter(IOFileFilter)",2,1,12,36,2
"org.apache.commons.io.filefilter.NotFileFilter.accept(File)",1,1,10,19,1
"org.apache.commons.io.filefilter.NotFileFilter.accept(File,String)",1,1,11,24,1
"org.apache.commons.io.filefilter.NotFileFilter.toString()",1,1,9,24,1
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter()",1,1,8,8,1
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter(IOFileFilter,IOFileFilter)",2,1,15,76,3
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter(List<IOFileFilter>)",1,1,14,46,2
"org.apache.commons.io.filefilter.OrFileFilter.accept(File)",3,2,12,46,3
"org.apache.commons.io.filefilter.OrFileFilter.accept(File,String)",3,2,12,55,3
"org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(IOFileFilter)",1,1,6,19,1
"org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()",1,1,6,11,1
"org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(IOFileFilter)",1,1,6,19,1
"org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(List<IOFileFilter>)",1,1,7,30,1
"org.apache.commons.io.filefilter.OrFileFilter.toString()",1,5,22,221,5
"org.apache.commons.io.filefilter.OrFileFilterTestCase.OrFileFilterTestCase(String)",1,1,3,11,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingAdd(List<IOFileFilter>)",1,2,8,74,2
"org.apache.commons.io.filefilter.OrFileFilterTestCase.buildFilterUsingConstructor(List<IOFileFilter>)",1,1,4,11,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getConditionalFileFilter()",1,1,4,4,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getDefaultWorkingPath()",1,1,4,4,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getFalseResults()",1,1,4,11,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getFileResults()",1,1,4,8,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getFilenameResults()",1,1,4,8,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getTestFilters()",1,1,4,8,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getTrueResults()",1,1,4,11,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.getWorkingPathNamePropertyKey()",1,1,4,4,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.setUp()",1,1,5,19,1
"org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()",1,1,185,"2,708",1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(List<String>)",1,1,10,11,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(List<String>,IOCase)",2,1,17,85,3
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String)",1,1,9,11,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String,IOCase)",2,1,16,70,3
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String[])",1,1,12,11,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String[],IOCase)",2,1,20,112,3
"org.apache.commons.io.filefilter.PrefixFileFilter.accept(File)",3,2,16,62,3
"org.apache.commons.io.filefilter.PrefixFileFilter.accept(File,String)",3,2,16,46,3
"org.apache.commons.io.filefilter.PrefixFileFilter.toString()",1,4,21,176,4
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(Pattern)",2,1,12,36,2
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String)",2,1,12,41,2
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String,IOCase)",2,2,17,108,4
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String,int)",2,1,13,51,2
"org.apache.commons.io.filefilter.RegexFileFilter.accept(File,String)",1,1,11,19,1
"org.apache.commons.io.filefilter.RegexFileFilterTestCase.RegexFileFilterTestCase(String)",1,1,3,8,1
"org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(IOFileFilter,File,boolean)",1,4,16,273,4
"org.apache.commons.io.filefilter.RegexFileFilterTestCase.setUp()",1,1,4,8,1
"org.apache.commons.io.filefilter.RegexFileFilterTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()",1,1,46,533,5
"org.apache.commons.io.filefilter.SizeFileFilter.SizeFileFilter(long)",1,1,10,15,1
"org.apache.commons.io.filefilter.SizeFileFilter.SizeFileFilter(long,boolean)",2,1,16,60,2
"org.apache.commons.io.filefilter.SizeFileFilter.accept(File)",1,1,16,39,2
"org.apache.commons.io.filefilter.SizeFileFilter.toString()",1,1,10,38,2
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(List<String>)",1,1,10,11,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(List<String>,IOCase)",2,1,17,85,3
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String)",1,1,9,11,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String,IOCase)",2,1,16,70,3
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String[])",1,1,12,11,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String[],IOCase)",2,1,20,112,3
"org.apache.commons.io.filefilter.SuffixFileFilter.accept(File)",3,2,16,62,3
"org.apache.commons.io.filefilter.SuffixFileFilter.accept(File,String)",3,2,16,51,3
"org.apache.commons.io.filefilter.SuffixFileFilter.toString()",1,4,21,176,4
"org.apache.commons.io.filefilter.TrueFileFilter.TrueFileFilter()",1,1,5,0,1
"org.apache.commons.io.filefilter.TrueFileFilter.accept(File)",1,1,9,8,1
"org.apache.commons.io.filefilter.TrueFileFilter.accept(File,String)",1,1,10,8,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(List<String>)",1,1,10,11,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(List<String>,IOCase)",2,1,15,85,3
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String)",1,1,9,11,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String,IOCase)",2,1,14,70,3
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String[])",1,1,12,11,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String[],IOCase)",2,1,18,112,3
"org.apache.commons.io.filefilter.WildcardFileFilter.accept(File)",3,2,16,57,3
"org.apache.commons.io.filefilter.WildcardFileFilter.accept(File,String)",3,2,16,46,3
"org.apache.commons.io.filefilter.WildcardFileFilter.toString()",1,4,21,176,4
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(List<String>)",2,1,13,53,2
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(String)",2,1,12,39,2
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(String[])",2,1,13,77,2
"org.apache.commons.io.filefilter.WildcardFilter.accept(File)",4,2,18,66,4
"org.apache.commons.io.filefilter.WildcardFilter.accept(File,String)",4,3,19,94,5
"org.apache.commons.io.input.AutoCloseInputStream.AutoCloseInputStream(InputStream)",1,1,8,8,1
"org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)",1,2,13,33,2
"org.apache.commons.io.input.AutoCloseInputStream.close()",1,1,18,18,1
"org.apache.commons.io.input.AutoCloseInputStream.finalize()",1,1,11,15,1
"org.apache.commons.io.input.AutoCloseInputStreamTest.setUp()",1,1,4,66,1
"org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()",1,1,8,51,1
"org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()",1,2,11,94,2
"org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()",1,3,17,292,3
"org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()",1,3,17,326,3
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream)",1,1,9,15,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,ByteOrderMark...)",1,1,11,15,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,boolean)",1,1,11,19,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,boolean,ByteOrderMark...)",2,1,20,120,3
"org.apache.commons.io.input.BOMInputStream.find()",3,2,13,30,3
"org.apache.commons.io.input.BOMInputStream.getBOM()",4,6,35,307,7
"org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()",1,2,12,30,2
"org.apache.commons.io.input.BOMInputStream.hasBOM()",1,1,10,19,1
"org.apache.commons.io.input.BOMInputStream.hasBOM(ByteOrderMark)",2,2,17,89,3
"org.apache.commons.io.input.BOMInputStream.mark(int)",1,1,12,48,1
"org.apache.commons.io.input.BOMInputStream.matches(ByteOrderMark)",3,2,19,89,3
"org.apache.commons.io.input.BOMInputStream.read()",1,2,12,39,2
"org.apache.commons.io.input.BOMInputStream.read(byte[])",1,1,13,31,1
"org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)",1,2,28,259,6
"org.apache.commons.io.input.BOMInputStream.readFirstBytes()",1,1,13,46,2
"org.apache.commons.io.input.BOMInputStream.reset()",1,1,14,43,2
"org.apache.commons.io.input.BOMInputStream.skip(long)",1,2,16,68,3
"org.apache.commons.io.input.BOMInputStreamTest.ExpectCloseInputStream.assertCloseCalled()",1,1,3,8,1
"org.apache.commons.io.input.BOMInputStreamTest.ExpectCloseInputStream.close()",1,1,4,11,1
"org.apache.commons.io.input.BOMInputStreamTest.ExpectCloseInputStream.read()",1,1,4,15,1
"org.apache.commons.io.input.BOMInputStreamTest.assertData(byte[],byte[],int)",1,2,7,118,2
"org.apache.commons.io.input.BOMInputStreamTest.createDataStream(byte[],boolean)",1,2,14,152,2
"org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice(String)",1,1,9,85,1
"org.apache.commons.io.input.BOMInputStreamTest.readFile(BOMInputStream)",1,2,7,70,2
"org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()",1,1,5,72,1
"org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()",1,1,5,72,1
"org.apache.commons.io.input.BOMInputStreamTest.testClose()",1,1,7,30,1
"org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM()",1,1,6,78,1
"org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM()",1,1,6,78,1
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()",1,1,11,204,1
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()",1,1,14,274,1
"org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()",1,1,6,92,1
"org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()",1,1,6,92,1
"org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()",1,1,6,104,1
"org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()",1,1,8,132,1
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()",1,1,11,138,1
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()",1,1,11,138,1
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()",1,1,10,129,1
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()",1,1,10,129,1
"org.apache.commons.io.input.BOMInputStreamTest.testNoBoms()",1,1,15,125,3
"org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()",1,1,8,124,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()",1,1,10,174,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithBOM()",1,1,3,15,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM()",1,1,3,15,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOM()",1,1,16,235,2
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()",1,1,14,274,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()",1,1,13,245,1
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()",1,1,11,199,1
"org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()",1,1,6,85,1
"org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()",1,1,6,85,1
"org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()",1,1,7,158,1
"org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()",1,1,7,158,1
"org.apache.commons.io.input.BOMInputStreamTest.testSupportCode()",1,1,15,302,1
"org.apache.commons.io.input.BoundedInputStream.BoundedInputStream(InputStream)",1,1,9,15,1
"org.apache.commons.io.input.BoundedInputStream.BoundedInputStream(InputStream,long)",1,1,13,22,1
"org.apache.commons.io.input.BoundedInputStream.available()",2,1,10,57,3
"org.apache.commons.io.input.BoundedInputStream.close()",1,2,11,19,2
"org.apache.commons.io.input.BoundedInputStream.isPropagateClose()",1,1,11,8,1
"org.apache.commons.io.input.BoundedInputStream.mark(int)",1,1,9,28,1
"org.apache.commons.io.input.BoundedInputStream.markSupported()",1,1,8,11,1
"org.apache.commons.io.input.BoundedInputStream.read()",2,1,16,84,3
"org.apache.commons.io.input.BoundedInputStream.read(byte[])",1,1,11,36,1
"org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)",3,2,22,208,5
"org.apache.commons.io.input.BoundedInputStream.reset()",1,1,9,24,1
"org.apache.commons.io.input.BoundedInputStream.setPropagateClose(boolean)",1,1,12,15,1
"org.apache.commons.io.input.BoundedInputStream.skip(long)",1,2,13,85,2
"org.apache.commons.io.input.BoundedInputStream.toString()",1,1,8,8,1
"org.apache.commons.io.input.BoundedInputStreamTest.BoundedInputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.input.BoundedInputStreamTest.compare(String,byte[],byte[])",1,2,9,129,2
"org.apache.commons.io.input.BoundedInputStreamTest.testReadArray()",1,1,18,333,1
"org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()",1,4,26,499,4
"org.apache.commons.io.input.BrokenInputStream.BrokenInputStream()",1,1,6,11,1
"org.apache.commons.io.input.BrokenInputStream.BrokenInputStream(IOException)",1,1,8,8,1
"org.apache.commons.io.input.BrokenInputStream.available()",1,1,10,11,1
"org.apache.commons.io.input.BrokenInputStream.close()",1,1,9,11,1
"org.apache.commons.io.input.BrokenInputStream.read()",1,1,10,11,1
"org.apache.commons.io.input.BrokenInputStream.reset()",1,1,9,11,1
"org.apache.commons.io.input.BrokenInputStream.skip(long)",1,1,11,13,1
"org.apache.commons.io.input.BrokenInputStreamTest.setUp()",1,1,5,20,1
"org.apache.commons.io.input.BrokenInputStreamTest.testAvailable()",1,2,8,38,2
"org.apache.commons.io.input.BrokenInputStreamTest.testClose()",1,2,8,38,2
"org.apache.commons.io.input.BrokenInputStreamTest.testRead()",1,4,20,151,4
"org.apache.commons.io.input.BrokenInputStreamTest.testReset()",1,2,8,38,2
"org.apache.commons.io.input.BrokenInputStreamTest.testSkip()",1,2,8,43,2
"org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream(CharSequence,Charset)",1,1,10,26,1
"org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream(CharSequence,Charset,int)",1,1,17,129,1
"org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream(CharSequence,String)",1,1,10,26,1
"org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream(CharSequence,String,int)",1,1,10,34,1
"org.apache.commons.io.input.CharSequenceInputStream.available()",1,1,4,19,1
"org.apache.commons.io.input.CharSequenceInputStream.close()",1,1,3,4,1
"org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()",1,2,14,85,2
"org.apache.commons.io.input.CharSequenceInputStream.mark(int)",1,1,8,31,1
"org.apache.commons.io.input.CharSequenceInputStream.markSupported()",1,1,4,8,1
"org.apache.commons.io.input.CharSequenceInputStream.read()",4,4,13,123,5
"org.apache.commons.io.input.CharSequenceInputStream.read(byte[])",1,1,4,31,1
"org.apache.commons.io.input.CharSequenceInputStream.read(byte[],int,int)",8,6,32,558,13
"org.apache.commons.io.input.CharSequenceInputStream.reset()",1,2,7,68,2
"org.apache.commons.io.input.CharSequenceInputStream.skip(long)",1,3,10,94,3
"org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop()",1,1,14,129,2
"org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithBufferedRead()",1,1,4,15,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset()",1,1,15,183,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()",1,1,5,28,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero()",1,1,6,62,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZeroEmptyString()",1,1,6,62,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip()",1,1,9,96,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF16WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithBufferedRead()",1,1,4,15,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.CharSequenceInputStreamTest.testWithBufferedRead(String,String)",3,4,24,433,4
"org.apache.commons.io.input.CharSequenceInputStreamTest.testWithSingleByteRead(String,String)",1,2,11,199,2
"org.apache.commons.io.input.CharSequenceReader.CharSequenceReader(CharSequence)",1,1,8,22,2
"org.apache.commons.io.input.CharSequenceReader.close()",1,1,8,13,1
"org.apache.commons.io.input.CharSequenceReader.mark(int)",1,1,9,11,1
"org.apache.commons.io.input.CharSequenceReader.markSupported()",1,1,9,8,1
"org.apache.commons.io.input.CharSequenceReader.read()",2,2,14,59,2
"org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)",6,2,32,358,8
"org.apache.commons.io.input.CharSequenceReader.reset()",1,1,8,8,1
"org.apache.commons.io.input.CharSequenceReader.skip(long)",3,1,20,158,3
"org.apache.commons.io.input.CharSequenceReader.toString()",1,1,10,8,1
"org.apache.commons.io.input.CharSequenceReaderTest.checkArray(char[],char[])",1,2,5,82,2
"org.apache.commons.io.input.CharSequenceReaderTest.checkRead(Reader,String)",1,2,6,101,2
"org.apache.commons.io.input.CharSequenceReaderTest.testClose()",1,1,8,41,1
"org.apache.commons.io.input.CharSequenceReaderTest.testMark()",1,1,14,114,1
"org.apache.commons.io.input.CharSequenceReaderTest.testMarkSupported()",1,1,6,19,1
"org.apache.commons.io.input.CharSequenceReaderTest.testRead()",1,1,10,96,1
"org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()",1,1,15,263,1
"org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()",1,1,11,243,1
"org.apache.commons.io.input.CharSequenceReaderTest.testSkip()",1,1,15,226,1
"org.apache.commons.io.input.ClassLoaderObjectInputStream.ClassLoaderObjectInputStream(ClassLoader,InputStream)",1,1,14,24,1
"org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(ObjectStreamClass)",2,2,21,70,2
"org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(String[])",1,3,24,136,3
"org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.ClassLoaderObjectInputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()",1,1,10,91,1
"org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()",1,1,11,118,1
"org.apache.commons.io.input.CloseShieldInputStream.CloseShieldInputStream(InputStream)",1,1,9,8,1
"org.apache.commons.io.input.CloseShieldInputStream.close()",1,1,9,8,1
"org.apache.commons.io.input.CloseShieldInputStreamTest.setUp()",1,1,4,76,1
"org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()",1,1,9,80,1
"org.apache.commons.io.input.ClosedInputStream.read()",1,1,9,11,1
"org.apache.commons.io.input.ClosedInputStreamTest.testRead()",1,1,6,24,1
"org.apache.commons.io.input.CountingInputStream.CountingInputStream(InputStream)",1,1,8,8,1
"org.apache.commons.io.input.CountingInputStream.afterRead(int)",1,1,12,41,2
"org.apache.commons.io.input.CountingInputStream.getByteCount()",1,1,13,15,1
"org.apache.commons.io.input.CountingInputStream.getCount()",2,1,17,59,2
"org.apache.commons.io.input.CountingInputStream.resetByteCount()",1,1,15,33,1
"org.apache.commons.io.input.CountingInputStream.resetCount()",2,1,17,59,2
"org.apache.commons.io.input.CountingInputStream.skip(long)",1,1,15,60,1
"org.apache.commons.io.input.CountingInputStreamTest.CountingInputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.input.CountingInputStreamTest.testCounting()",1,1,25,360,1
"org.apache.commons.io.input.CountingInputStreamTest.testEOF1()",1,1,13,163,1
"org.apache.commons.io.input.CountingInputStreamTest.testEOF2()",1,1,8,93,1
"org.apache.commons.io.input.CountingInputStreamTest.testEOF3()",1,1,8,106,1
"org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()",1,1,28,206,3
"org.apache.commons.io.input.CountingInputStreamTest.testResetting()",1,1,12,171,1
"org.apache.commons.io.input.CountingInputStreamTest.testSkipping()",1,1,12,160,1
"org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()",1,1,7,78,1
"org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()",1,1,8,102,1
"org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()",1,1,8,112,1
"org.apache.commons.io.input.DemuxInputStream.bindStream(InputStream)",1,1,12,22,1
"org.apache.commons.io.input.DemuxInputStream.close()",1,2,15,36,2
"org.apache.commons.io.input.DemuxInputStream.read()",2,2,20,60,2
"org.apache.commons.io.input.NullInputStream.NullInputStream(long)",1,1,9,19,1
"org.apache.commons.io.input.NullInputStream.NullInputStream(long,boolean,boolean)",1,1,16,43,1
"org.apache.commons.io.input.NullInputStream.available()",3,1,16,87,3
"org.apache.commons.io.input.NullInputStream.close()",1,1,12,33,1
"org.apache.commons.io.input.NullInputStream.doEndOfFile()",2,1,15,43,2
"org.apache.commons.io.input.NullInputStream.getPosition()",1,1,8,8,1
"org.apache.commons.io.input.NullInputStream.getSize()",1,1,8,8,1
"org.apache.commons.io.input.NullInputStream.mark(int)",2,1,15,58,2
"org.apache.commons.io.input.NullInputStream.markSupported()",1,1,9,8,1
"org.apache.commons.io.input.NullInputStream.processByte()",1,1,11,8,1
"org.apache.commons.io.input.NullInputStream.processBytes(byte[],int,int)",1,1,13,10,1
"org.apache.commons.io.input.NullInputStream.read()",3,2,21,70,3
"org.apache.commons.io.input.NullInputStream.read(byte[])",1,1,15,31,1
"org.apache.commons.io.input.NullInputStream.read(byte[],int,int)",3,2,30,175,4
"org.apache.commons.io.input.NullInputStream.reset()",4,1,24,153,4
"org.apache.commons.io.input.NullInputStream.skip(long)",3,2,27,134,4
"org.apache.commons.io.input.NullInputStreamTest.NullInputStreamTest(String)",1,1,4,8,1
"org.apache.commons.io.input.NullInputStreamTest.TestNullInputStream.TestNullInputStream(int)",1,1,3,11,1
"org.apache.commons.io.input.NullInputStreamTest.TestNullInputStream.TestNullInputStream(int,boolean,boolean)",1,1,3,26,1
"org.apache.commons.io.input.NullInputStreamTest.TestNullInputStream.processByte()",1,1,4,18,1
"org.apache.commons.io.input.NullInputStreamTest.TestNullInputStream.processBytes(byte[],int,int)",1,1,7,93,2
"org.apache.commons.io.input.NullInputStreamTest.setUp()",1,1,5,11,1
"org.apache.commons.io.input.NullInputStreamTest.tearDown()",1,1,5,11,1
"org.apache.commons.io.input.NullInputStreamTest.testEOFException()",1,1,15,114,2
"org.apache.commons.io.input.NullInputStreamTest.testMarkAndReset()",1,6,44,515,6
"org.apache.commons.io.input.NullInputStreamTest.testMarkNotSupported()",1,3,19,157,3
"org.apache.commons.io.input.NullInputStreamTest.testRead()",1,3,25,343,3
"org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()",1,5,39,592,5
"org.apache.commons.io.input.NullInputStreamTest.testSkip()",1,2,20,269,2
"org.apache.commons.io.input.NullReader.NullReader(long)",1,1,9,19,1
"org.apache.commons.io.input.NullReader.NullReader(long,boolean,boolean)",1,1,16,43,1
"org.apache.commons.io.input.NullReader.close()",1,1,12,33,1
"org.apache.commons.io.input.NullReader.doEndOfFile()",2,1,15,43,2
"org.apache.commons.io.input.NullReader.getPosition()",1,1,8,8,1
"org.apache.commons.io.input.NullReader.getSize()",1,1,8,8,1
"org.apache.commons.io.input.NullReader.mark(int)",2,1,15,58,2
"org.apache.commons.io.input.NullReader.markSupported()",1,1,9,8,1
"org.apache.commons.io.input.NullReader.processChar()",1,1,11,8,1
"org.apache.commons.io.input.NullReader.processChars(char[],int,int)",1,1,13,10,1
"org.apache.commons.io.input.NullReader.read()",3,2,21,70,3
"org.apache.commons.io.input.NullReader.read(char[])",1,1,15,31,1
"org.apache.commons.io.input.NullReader.read(char[],int,int)",3,2,30,175,4
"org.apache.commons.io.input.NullReader.reset()",4,1,24,153,4
"org.apache.commons.io.input.NullReader.skip(long)",3,2,27,134,4
"org.apache.commons.io.input.NullReaderTest.NullReaderTest(String)",1,1,4,8,1
"org.apache.commons.io.input.NullReaderTest.TestNullReader.TestNullReader(int)",1,1,3,11,1
"org.apache.commons.io.input.NullReaderTest.TestNullReader.TestNullReader(int,boolean,boolean)",1,1,3,26,1
"org.apache.commons.io.input.NullReaderTest.TestNullReader.processChar()",1,1,4,18,1
"org.apache.commons.io.input.NullReaderTest.TestNullReader.processChars(char[],int,int)",1,1,7,93,2
"org.apache.commons.io.input.NullReaderTest.setUp()",1,1,5,11,1
"org.apache.commons.io.input.NullReaderTest.tearDown()",1,1,5,11,1
"org.apache.commons.io.input.NullReaderTest.testEOFException()",1,1,15,114,2
"org.apache.commons.io.input.NullReaderTest.testMarkAndReset()",1,6,44,515,6
"org.apache.commons.io.input.NullReaderTest.testMarkNotSupported()",1,3,19,157,3
"org.apache.commons.io.input.NullReaderTest.testRead()",1,3,22,242,3
"org.apache.commons.io.input.NullReaderTest.testReadCharArray()",1,5,39,595,5
"org.apache.commons.io.input.NullReaderTest.testSkip()",1,2,20,269,2
"org.apache.commons.io.input.ProxyInputStream.ProxyInputStream(InputStream)",1,1,9,8,1
"org.apache.commons.io.input.ProxyInputStream.afterRead(int)",1,1,19,11,1
"org.apache.commons.io.input.ProxyInputStream.available()",1,2,14,41,2
"org.apache.commons.io.input.ProxyInputStream.beforeRead(int)",1,1,20,15,1
"org.apache.commons.io.input.ProxyInputStream.close()",1,2,12,28,2
"org.apache.commons.io.input.ProxyInputStream.handleIOException(IOException)",1,1,12,11,1
"org.apache.commons.io.input.ProxyInputStream.mark(int)",1,1,8,19,1
"org.apache.commons.io.input.ProxyInputStream.markSupported()",1,1,8,11,1
"org.apache.commons.io.input.ProxyInputStream.read()",1,2,17,102,3
"org.apache.commons.io.input.ProxyInputStream.read(byte[])",1,2,18,114,3
"org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)",1,2,20,106,2
"org.apache.commons.io.input.ProxyInputStream.reset()",1,2,12,33,2
"org.apache.commons.io.input.ProxyInputStream.skip(long)",1,2,15,50,2
"org.apache.commons.io.input.ProxyReader.ProxyReader(Reader)",1,1,9,8,1
"org.apache.commons.io.input.ProxyReader.afterRead(int)",1,1,19,11,1
"org.apache.commons.io.input.ProxyReader.beforeRead(int)",1,1,20,15,1
"org.apache.commons.io.input.ProxyReader.close()",1,2,12,28,2
"org.apache.commons.io.input.ProxyReader.handleIOException(IOException)",1,1,12,11,1
"org.apache.commons.io.input.ProxyReader.mark(int)",1,2,13,43,2
"org.apache.commons.io.input.ProxyReader.markSupported()",1,1,8,11,1
"org.apache.commons.io.input.ProxyReader.read()",1,2,17,102,3
"org.apache.commons.io.input.ProxyReader.read(CharBuffer)",1,3,19,108,3
"org.apache.commons.io.input.ProxyReader.read(char[])",1,2,18,114,3
"org.apache.commons.io.input.ProxyReader.read(char[],int,int)",1,2,20,106,2
"org.apache.commons.io.input.ProxyReader.ready()",1,2,14,41,2
"org.apache.commons.io.input.ProxyReader.reset()",1,2,12,33,2
"org.apache.commons.io.input.ProxyReader.skip(long)",1,2,15,50,2
"org.apache.commons.io.input.ProxyReaderTest.CustomNullReader.CustomNullReader(int)",1,1,3,8,1
"org.apache.commons.io.input.ProxyReaderTest.CustomNullReader.read(CharBuffer)",1,2,4,36,2
"org.apache.commons.io.input.ProxyReaderTest.CustomNullReader.read(char[])",1,2,4,41,2
"org.apache.commons.io.input.ProxyReaderTest.ProxyReaderImpl.ProxyReaderImpl(Reader)",1,1,3,4,1
"org.apache.commons.io.input.ProxyReaderTest.ProxyReaderTest(String)",1,1,3,8,1
"org.apache.commons.io.input.ProxyReaderTest.testNullCharArray()",1,3,14,105,3
"org.apache.commons.io.input.ProxyReaderTest.testNullCharBuffer()",1,2,9,51,2
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader)",1,1,9,11,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,Charset)",1,1,10,15,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,Charset,int)",1,1,14,41,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder)",1,1,10,15,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)",1,1,16,85,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,String)",1,1,10,15,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,String,int)",1,1,10,24,1
"org.apache.commons.io.input.ReaderInputStream.close()",1,1,9,11,1
"org.apache.commons.io.input.ReaderInputStream.fillBuffer()",1,5,25,259,5
"org.apache.commons.io.input.ReaderInputStream.read()",4,4,20,95,5
"org.apache.commons.io.input.ReaderInputStream.read(byte[])",1,1,12,31,1
"org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)",7,4,39,440,12
"org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()",1,1,19,122,2
"org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithBufferedRead()",1,1,4,15,1
"org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()",1,1,10,151,1
"org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()",1,1,10,156,1
"org.apache.commons.io.input.ReaderInputStreamTest.testUTF16WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithBufferedRead()",1,1,4,15,1
"org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithSingleByteRead()",1,1,4,15,1
"org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead(String,String)",3,4,24,356,4
"org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead(String,String)",1,2,11,153,2
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart.FilePart(long,int,byte[])",3,3,27,380,5
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart.createLeftOver()",1,2,14,110,2
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart.getNewLineMatchByteCount(byte[],int)",3,1,20,210,5
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart.readLine()",6,5,47,496,9
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart.rollOver()",4,1,22,164,4
"org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader(File)",1,1,11,28,1
"org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader(File,int,Charset)",6,6,58,717,9
"org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader(File,int,String)",1,1,18,39,1
"org.apache.commons.io.input.ReversedLinesFileReader.close()",1,1,8,11,1
"org.apache.commons.io.input.ReversedLinesFileReader.readLine()",3,5,24,144,5
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.ReversedLinesFileReaderTestParamBlockSize(Integer)",1,1,3,8,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(String,String)",1,1,3,15,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertEqualsAndNoLineBreaks(String,String,String)",1,2,7,96,2
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines(ReversedLinesFileReader)",1,2,8,95,2
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.blockSizes()",1,1,5,38,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()",1,1,8,15,2
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()",1,1,6,66,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()",1,1,9,106,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()",1,3,11,192,3
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()",1,1,7,89,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()",1,1,6,60,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()",1,1,5,51,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()",1,1,5,51,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.ReversedLinesFileReaderTestParamFile(String,String,Integer)",1,2,5,53,2
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.blockSizes()",1,1,18,222,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()",1,1,13,30,3
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()",1,3,17,209,3
"org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()",1,1,8,15,2
"org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()",1,1,9,106,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()",1,1,5,51,1
"org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()",1,1,5,51,1
"org.apache.commons.io.input.SwappedDataInputStream.SwappedDataInputStream(InputStream)",1,1,9,8,1
"org.apache.commons.io.input.SwappedDataInputStream.readBoolean()",1,1,11,19,1
"org.apache.commons.io.input.SwappedDataInputStream.readByte()",1,1,11,18,1
"org.apache.commons.io.input.SwappedDataInputStream.readChar()",1,1,11,13,1
"org.apache.commons.io.input.SwappedDataInputStream.readDouble()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readFloat()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])",1,1,12,26,1
"org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)",3,2,24,142,3
"org.apache.commons.io.input.SwappedDataInputStream.readInt()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readLine()",1,1,12,11,1
"org.apache.commons.io.input.SwappedDataInputStream.readLong()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readShort()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readUTF()",1,1,12,11,1
"org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()",1,1,11,15,1
"org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)",1,1,12,25,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.SwappedDataInputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.setUp()",1,1,15,76,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.tearDown()",1,1,4,11,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()",1,1,12,97,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()",1,1,3,24,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()",1,1,3,28,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()",1,1,3,33,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()",1,1,3,33,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()",1,2,7,100,2
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()",1,1,3,24,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()",1,1,7,33,2
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()",1,1,3,24,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()",1,1,3,28,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()",1,1,7,33,2
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()",1,1,3,24,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()",1,1,3,28,1
"org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()",1,1,4,39,1
"org.apache.commons.io.input.TaggedInputStream.TaggedInputStream(InputStream)",1,1,8,8,1
"org.apache.commons.io.input.TaggedInputStream.handleIOException(IOException)",1,1,10,19,1
"org.apache.commons.io.input.TaggedInputStream.isCauseOf(Throwable)",1,1,10,15,1
"org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(Throwable)",1,1,13,15,1
"org.apache.commons.io.input.TaggedInputStreamTest.testBrokenStream()",1,7,44,284,7
"org.apache.commons.io.input.TaggedInputStreamTest.testEmptyStream()",1,2,12,157,2
"org.apache.commons.io.input.TaggedInputStreamTest.testNormalStream()",1,2,17,238,2
"org.apache.commons.io.input.TaggedInputStreamTest.testOtherException()",1,3,19,128,3
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener)",1,1,8,15,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long)",1,1,9,24,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long,boolean)",1,1,10,33,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long,boolean,boolean)",1,1,11,41,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long,boolean,boolean,int)",1,1,19,121,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long,boolean,int)",1,1,11,43,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener)",1,1,11,24,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long)",1,1,11,28,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean)",1,1,12,38,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,boolean)",1,1,13,46,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,boolean,int)",1,1,19,91,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,int)",1,1,17,81,1
"org.apache.commons.io.input.Tailer.getDelay()",1,1,8,8,1
"org.apache.commons.io.input.Tailer.getFile()",1,1,8,4,1
"org.apache.commons.io.input.Tailer.readLines(RandomAccessFile)",2,7,44,491,9
"org.apache.commons.io.input.Tailer.run()",3,13,84,641,17
"org.apache.commons.io.input.Tailer.stop()",1,1,6,11,1
"org.apache.commons.io.input.TailerListenerAdapter.fileNotFound()",1,1,5,2,1
"org.apache.commons.io.input.TailerListenerAdapter.fileRotated()",1,1,8,2,1
"org.apache.commons.io.input.TailerListenerAdapter.handle(Exception)",1,1,6,2,1
"org.apache.commons.io.input.TailerListenerAdapter.handle(String)",1,1,6,2,1
"org.apache.commons.io.input.TailerListenerAdapter.init(Tailer)",1,1,7,2,1
"org.apache.commons.io.input.TailerTest.TailerTest(String)",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.clear()",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.fileNotFound()",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.fileRotated()",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.getLines()",1,1,3,4,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.handle(Exception)",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.handle(String)",1,1,3,11,1
"org.apache.commons.io.input.TailerTest.TestTailerListener.init(Tailer)",1,1,3,8,1
"org.apache.commons.io.input.TailerTest.createFile(File,long)",1,2,23,122,4
"org.apache.commons.io.input.TailerTest.tearDown()",1,2,9,53,2
"org.apache.commons.io.input.TailerTest.testBufferBreak()",1,3,15,230,3
"org.apache.commons.io.input.TailerTest.testIO335()",1,1,25,440,1
"org.apache.commons.io.input.TailerTest.testLongFile()",1,4,22,390,4
"org.apache.commons.io.input.TailerTest.testStopWithNoFile()",1,1,16,278,1
"org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()",1,1,18,301,1
"org.apache.commons.io.input.TailerTest.testTailer()",1,1,58,"1,123",1
"org.apache.commons.io.input.TailerTest.testTailerEof()",1,1,28,391,1
"org.apache.commons.io.input.TailerTest.write(File,String...)",1,2,12,77,2
"org.apache.commons.io.input.TailerTest.writeString(File,String...)",1,2,12,66,2
"org.apache.commons.io.input.TeeInputStream.TeeInputStream(InputStream,OutputStream)",1,1,11,15,1
"org.apache.commons.io.input.TeeInputStream.TeeInputStream(InputStream,OutputStream,boolean)",1,1,17,36,1
"org.apache.commons.io.input.TeeInputStream.close()",1,2,17,38,2
"org.apache.commons.io.input.TeeInputStream.read()",1,2,15,59,2
"org.apache.commons.io.input.TeeInputStream.read(byte[])",1,2,16,80,2
"org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)",1,2,18,98,2
"org.apache.commons.io.input.TeeInputStreamTest.setUp()",1,1,6,43,1
"org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()",1,1,10,151,1
"org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()",1,1,7,106,1
"org.apache.commons.io.input.TeeInputStreamTest.testReadNothing()",1,1,3,28,1
"org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()",1,1,4,48,1
"org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()",1,1,9,165,1
"org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()",1,1,9,183,1
"org.apache.commons.io.input.TeeInputStreamTest.testSkip()",1,1,7,114,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(File)",1,1,15,15,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream)",1,1,14,15,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String)",1,1,21,19,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String,boolean)",1,1,37,28,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String,boolean,String)",1,1,42,122,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,boolean)",1,1,30,24,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,boolean,String)",1,1,35,116,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(URL)",1,1,20,19,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(URLConnection,String)",1,2,33,232,3
"org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(String,String,String,String,boolean)",13,14,71,954,20
"org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(String,String,String)",13,23,62,974,27
"org.apache.commons.io.input.XmlStreamReader.close()",1,1,9,11,1
"org.apache.commons.io.input.XmlStreamReader.doHttpStream(BOMInputStream,BOMInputStream,String,boolean)",2,3,27,122,3
"org.apache.commons.io.input.XmlStreamReader.doLenientDetection(String,XmlStreamReaderException)",2,4,30,259,7
"org.apache.commons.io.input.XmlStreamReader.doRawStream(BOMInputStream,BOMInputStream,boolean)",2,3,25,114,3
"org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(String)",1,5,20,185,5
"org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(String)",1,3,19,108,3
"org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()",1,1,11,4,1
"org.apache.commons.io.input.XmlStreamReader.getEncoding()",1,1,8,4,1
"org.apache.commons.io.input.XmlStreamReader.getXmlProlog(InputStream,String)",4,6,55,744,10
"org.apache.commons.io.input.XmlStreamReader.isAppXml(String)",1,6,14,89,6
"org.apache.commons.io.input.XmlStreamReader.isTextXml(String)",1,5,13,76,5
"org.apache.commons.io.input.XmlStreamReader.read(char[],int,int)",1,1,12,39,1
"org.apache.commons.io.input.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String)",1,1,15,26,1
"org.apache.commons.io.input.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String,String,String)",1,1,22,53,1
"org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()",1,1,8,4,1
"org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()",1,1,11,4,1
"org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()",1,1,10,4,1
"org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()",1,1,8,4,1
"org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()",1,1,8,4,1
"org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding(String,String,String,String,String)",1,2,18,194,4
"org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid(String,String,String,String)",1,2,13,171,3
"org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient(String,String,String,String,String)",1,1,7,84,2
"org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid(String,String,String,String)",1,2,15,159,3
"org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid(String,String,String)",1,2,13,155,2
"org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid(String)",1,3,11,165,3
"org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid(String)",1,2,9,102,2
"org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid(String)",1,1,17,279,1
"org.apache.commons.io.input.XmlStreamReaderTest.getXML(String,String,String,String)",1,1,10,68,1
"org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream(String,String,String,String)",1,3,28,284,4
"org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()",1,1,7,55,1
"org.apache.commons.io.input.XmlStreamReaderTest.testHttp()",1,1,78,"2,041",1
"org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()",1,1,9,108,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()",1,1,9,72,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()",1,1,9,72,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()",1,1,15,204,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()",1,1,9,104,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()",1,1,4,11,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.MockXmlStreamReader.MockXmlStreamReader(String)",1,1,3,28,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding(String,String,String,String,boolean,String)",1,1,5,48,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding(String,String,String,String)",1,1,5,33,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml(boolean,String)",1,1,3,31,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding(String,String)",1,1,3,26,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime(String,String)",1,1,3,26,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding(String,boolean,String,String,String,String,String)",1,1,13,317,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError(String,boolean,String,String,String,String,String)",1,3,19,343,3
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding(String,String,String,String,String)",1,1,11,218,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError(String,String,String,String,String)",1,3,17,297,3
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml(boolean,String)",1,1,3,31,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()",1,1,16,148,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()",1,1,25,726,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()",1,1,18,420,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()",1,1,15,209,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()",1,1,15,209,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()",1,1,18,247,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()",1,1,8,42,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard(String,String,String)",1,1,11,169,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandardUtf32()",1,1,9,42,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()",1,1,19,203,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeMime()",1,1,10,63,1
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()",1,1,13,110,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(File)",1,1,15,15,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(InputStream)",1,1,14,15,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(InputStream,String)",1,1,21,19,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(InputStream,String,boolean)",1,1,37,28,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(InputStream,String,boolean,String)",2,3,48,109,4
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(InputStream,boolean)",2,3,40,77,3
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(URL)",1,1,20,15,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.XmlStreamReader(URLConnection)",1,6,43,215,6
"org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding(String,String,String,String,String,InputStream,boolean)",10,17,61,979,19
"org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding(String,String,String,InputStream)",11,27,61,"1,107",30
"org.apache.commons.io.input.compatibility.XmlStreamReader.close()",1,1,9,11,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream(InputStream,String,boolean)",1,1,12,131,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection(String,XmlStreamReaderException)",1,5,26,275,8
"org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream(InputStream,boolean)",1,1,9,89,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding(BufferedInputStream)",1,4,27,384,8
"org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding(String)",1,5,15,178,5
"org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime(String)",1,3,10,94,3
"org.apache.commons.io.input.compatibility.XmlStreamReader.getDefaultEncoding()",1,1,11,8,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.getEncoding()",1,1,8,4,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding(BufferedInputStream)",1,1,27,559,17
"org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog(BufferedInputStream,String)",4,6,48,744,10
"org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml(String)",1,6,9,89,6
"org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml(String)",1,5,7,76,5
"org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader(InputStream,String)",1,1,5,31,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.read(char[],int,int)",1,1,4,39,1
"org.apache.commons.io.input.compatibility.XmlStreamReader.setDefaultEncoding(String)",1,1,13,11,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String,InputStream)",1,1,16,31,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String,String,String,InputStream)",1,1,19,43,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()",1,1,9,4,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.MockXmlStreamReader.MockXmlStreamReader(String)",1,1,3,28,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding(String,String,String,String,boolean,String)",1,1,9,68,1
"org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding(String,String,String,String)",1,1,6,38,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase.AbstractMonitorTestCase(String)",1,1,8,8,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionSizes(String,int,int,int,int,int,int)",1,1,17,403,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase.checkCollectionsEmpty(String)",1,1,6,33,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver(File,FileFilter)",1,2,16,78,2
"org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()",1,2,17,156,2
"org.apache.commons.io.monitor.AbstractMonitorTestCase.sleepHandleInterruped(long)",1,1,10,19,2
"org.apache.commons.io.monitor.AbstractMonitorTestCase.tearDown()",1,1,4,11,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase.touch(File)",1,4,23,182,4
"org.apache.commons.io.monitor.CollectionFileListener.CollectionFileListener(boolean)",1,1,8,11,1
"org.apache.commons.io.monitor.CollectionFileListener.clear()",1,1,11,44,1
"org.apache.commons.io.monitor.CollectionFileListener.getChangedDirectories()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.getChangedFiles()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.getCreatedDirectories()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.getCreatedFiles()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.getDeletedDirectories()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.getDeletedFiles()",1,1,8,4,1
"org.apache.commons.io.monitor.CollectionFileListener.onDirectoryChange(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onDirectoryCreate(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onDirectoryDelete(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onFileChange(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onFileCreate(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onFileDelete(File)",1,1,8,15,1
"org.apache.commons.io.monitor.CollectionFileListener.onStart(FileAlterationObserver)",1,2,10,15,2
"org.apache.commons.io.monitor.CollectionFileListener.onStop(FileAlterationObserver)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryChange(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryCreate(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onDirectoryDelete(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileChange(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileCreate(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onFileDelete(File)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStart(FileAlterationObserver)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor.onStop(FileAlterationObserver)",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationMonitor.FileAlterationMonitor()",1,1,6,8,1
"org.apache.commons.io.monitor.FileAlterationMonitor.FileAlterationMonitor(long)",1,1,9,11,1
"org.apache.commons.io.monitor.FileAlterationMonitor.FileAlterationMonitor(long,FileAlterationObserver...)",1,3,15,46,3
"org.apache.commons.io.monitor.FileAlterationMonitor.addObserver(FileAlterationObserver)",1,2,10,31,2
"org.apache.commons.io.monitor.FileAlterationMonitor.getInterval()",1,1,8,8,1
"org.apache.commons.io.monitor.FileAlterationMonitor.getObservers()",1,1,9,4,1
"org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(FileAlterationObserver)",1,2,11,36,3
"org.apache.commons.io.monitor.FileAlterationMonitor.run()",3,3,17,68,5
"org.apache.commons.io.monitor.FileAlterationMonitor.setThreadFactory(ThreadFactory)",1,1,8,15,1
"org.apache.commons.io.monitor.FileAlterationMonitor.start()",2,3,20,129,4
"org.apache.commons.io.monitor.FileAlterationMonitor.stop()",1,1,8,15,1
"org.apache.commons.io.monitor.FileAlterationMonitor.stop(long)",2,3,22,117,4
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.FileAlterationMonitorTestCase(String)",1,1,9,15,1
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.checkFile(String,File,Collection<File>)",3,2,12,95,3
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.setUp()",1,1,5,24,1
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()",1,1,29,366,1
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testDefaultConstructor()",1,1,7,24,1
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()",1,2,42,367,4
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()",1,2,28,276,2
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(File)",1,1,8,11,1
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(File,FileFilter)",1,1,9,15,1
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(File,FileFilter,IOCase)",1,1,11,19,1
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(FileEntry,FileFilter,IOCase)",3,3,25,206,6
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(String)",1,1,8,11,1
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(String,FileFilter)",1,1,9,15,1
"org.apache.commons.io.monitor.FileAlterationObserver.FileAlterationObserver(String,FileFilter,IOCase)",1,1,11,19,1
"org.apache.commons.io.monitor.FileAlterationObserver.addListener(FileAlterationListener)",1,2,10,31,2
"org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()",1,5,22,140,5
"org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify(FileEntry,FileEntry[],File[])",1,7,32,488,8
"org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry(FileEntry,File)",1,2,18,164,3
"org.apache.commons.io.monitor.FileAlterationObserver.destroy()",1,1,7,4,1
"org.apache.commons.io.monitor.FileAlterationObserver.doCreate(FileEntry)",1,4,18,88,4
"org.apache.commons.io.monitor.FileAlterationObserver.doDelete(FileEntry)",1,3,14,57,3
"org.apache.commons.io.monitor.FileAlterationObserver.doMatch(FileEntry,File)",1,4,17,66,4
"org.apache.commons.io.monitor.FileAlterationObserver.getDirectory()",1,1,8,8,1
"org.apache.commons.io.monitor.FileAlterationObserver.getFileFilter()",1,1,9,4,1
"org.apache.commons.io.monitor.FileAlterationObserver.getListeners()",1,1,8,4,1
"org.apache.commons.io.monitor.FileAlterationObserver.initialize()",1,2,14,158,3
"org.apache.commons.io.monitor.FileAlterationObserver.listFiles(File)",1,4,20,144,6
"org.apache.commons.io.monitor.FileAlterationObserver.removeListener(FileAlterationListener)",1,2,11,36,3
"org.apache.commons.io.monitor.FileAlterationObserver.toString()",1,2,21,183,2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.FileAlterationObserverTestCase(String)",1,1,9,15,1
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()",1,1,8,11,1
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.setUp()",1,1,5,24,1
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()",1,1,21,230,1
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()",1,2,55,"1,158",2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()",1,2,55,"1,031",2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()",1,2,55,"1,039",2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()",1,2,52,965,2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()",1,2,50,912,2
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()",1,1,14,120,1
"org.apache.commons.io.monitor.FileEntry.FileEntry(File)",1,1,8,11,1
"org.apache.commons.io.monitor.FileEntry.FileEntry(FileEntry,File)",2,1,14,68,2
"org.apache.commons.io.monitor.FileEntry.getChildren()",1,1,10,18,2
"org.apache.commons.io.monitor.FileEntry.getFile()",1,1,8,4,1
"org.apache.commons.io.monitor.FileEntry.getLastModified()",1,1,9,8,1
"org.apache.commons.io.monitor.FileEntry.getLength()",1,1,8,8,1
"org.apache.commons.io.monitor.FileEntry.getLevel()",1,2,8,36,2
"org.apache.commons.io.monitor.FileEntry.getName()",1,1,8,4,1
"org.apache.commons.io.monitor.FileEntry.getParent()",1,1,8,4,1
"org.apache.commons.io.monitor.FileEntry.isDirectory()",1,1,8,8,1
"org.apache.commons.io.monitor.FileEntry.isExists()",1,1,9,8,1
"org.apache.commons.io.monitor.FileEntry.newChildInstance(File)",1,1,12,11,1
"org.apache.commons.io.monitor.FileEntry.refresh(File)",1,4,32,215,8
"org.apache.commons.io.monitor.FileEntry.setChildren(FileEntry[])",1,1,8,11,1
"org.apache.commons.io.monitor.FileEntry.setDirectory(boolean)",1,1,8,15,1
"org.apache.commons.io.monitor.FileEntry.setExists(boolean)",1,1,9,15,1
"org.apache.commons.io.monitor.FileEntry.setLastModified(long)",1,1,9,15,1
"org.apache.commons.io.monitor.FileEntry.setLength(long)",1,1,8,15,1
"org.apache.commons.io.monitor.FileEntry.setName(String)",1,1,8,11,1
"org.apache.commons.io.output.BrokenOutputStream.BrokenOutputStream()",1,1,6,11,1
"org.apache.commons.io.output.BrokenOutputStream.BrokenOutputStream(IOException)",1,1,8,8,1
"org.apache.commons.io.output.BrokenOutputStream.close()",1,1,9,11,1
"org.apache.commons.io.output.BrokenOutputStream.flush()",1,1,9,11,1
"org.apache.commons.io.output.BrokenOutputStream.write(int)",1,1,10,15,1
"org.apache.commons.io.output.BrokenOutputStreamTest.setUp()",1,1,5,20,1
"org.apache.commons.io.output.BrokenOutputStreamTest.testClose()",1,2,8,38,2
"org.apache.commons.io.output.BrokenOutputStreamTest.testFlush()",1,2,8,38,2
"org.apache.commons.io.output.BrokenOutputStreamTest.testWrite()",1,4,20,155,4
"org.apache.commons.io.output.ByteArrayOutputStream.ByteArrayOutputStream()",1,1,7,8,1
"org.apache.commons.io.output.ByteArrayOutputStream.ByteArrayOutputStream(int)",2,1,16,55,2
"org.apache.commons.io.output.ByteArrayOutputStream.close()",1,1,12,4,1
"org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)",1,3,29,239,3
"org.apache.commons.io.output.ByteArrayOutputStream.reset()",1,1,9,43,1
"org.apache.commons.io.output.ByteArrayOutputStream.size()",1,1,7,11,1
"org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream()",4,2,26,162,4
"org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream)",1,1,27,31,1
"org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()",4,2,25,187,4
"org.apache.commons.io.output.ByteArrayOutputStream.toString()",1,1,9,8,1
"org.apache.commons.io.output.ByteArrayOutputStream.toString(String)",1,1,12,15,1
"org.apache.commons.io.output.ByteArrayOutputStream.write(InputStream)",1,3,27,227,3
"org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)",3,3,33,403,9
"org.apache.commons.io.output.ByteArrayOutputStream.write(int)",1,2,14,106,2
"org.apache.commons.io.output.ByteArrayOutputStream.writeTo(OutputStream)",3,2,19,112,3
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.ByteArrayOutputStreamTestCase(String)",1,1,3,8,1
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp(byte[],byte[])",3,1,8,100,3
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays(byte[],byte[])",1,3,8,72,3
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(ByteArrayOutputStream,ByteArrayOutputStream)",1,1,8,64,1
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()",1,1,42,542,1
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(ByteArrayOutputStream,ByteArrayOutputStream,int)",3,2,16,160,3
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(ByteArrayOutputStream,ByteArrayOutputStream,int[])",1,2,9,51,2
"org.apache.commons.io.output.CloseShieldOutputStream.CloseShieldOutputStream(OutputStream)",1,1,9,8,1
"org.apache.commons.io.output.CloseShieldOutputStream.close()",1,1,9,8,1
"org.apache.commons.io.output.CloseShieldOutputStreamTest.setUp()",1,1,4,41,1
"org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()",1,1,16,120,2
"org.apache.commons.io.output.ClosedOutputStream.write(int)",1,1,10,28,1
"org.apache.commons.io.output.ClosedOutputStreamTest.testRead()",1,1,11,28,2
"org.apache.commons.io.output.CountingOutputStream.CountingOutputStream(OutputStream)",1,1,8,8,1
"org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)",1,1,10,15,1
"org.apache.commons.io.output.CountingOutputStream.getByteCount()",1,1,13,15,1
"org.apache.commons.io.output.CountingOutputStream.getCount()",2,1,17,59,2
"org.apache.commons.io.output.CountingOutputStream.resetByteCount()",1,1,15,33,1
"org.apache.commons.io.output.CountingOutputStream.resetCount()",2,1,17,59,2
"org.apache.commons.io.output.CountingOutputStreamTest.CountingOutputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(String,byte[],int,int)",1,2,5,92,2
"org.apache.commons.io.output.CountingOutputStreamTest.testCounting()",1,3,29,615,5
"org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()",1,1,28,206,3
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,File)",1,1,11,25,1
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,File,String,String,File)",1,1,19,85,1
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,String,String,File)",2,1,18,60,2
"org.apache.commons.io.output.DeferredFileOutputStream.close()",1,1,11,19,1
"org.apache.commons.io.output.DeferredFileOutputStream.getData()",2,2,16,33,2
"org.apache.commons.io.output.DeferredFileOutputStream.getFile()",1,1,18,4,1
"org.apache.commons.io.output.DeferredFileOutputStream.getStream()",1,1,13,8,1
"org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()",1,1,11,11,1
"org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()",1,2,19,84,2
"org.apache.commons.io.output.DeferredFileOutputStream.writeTo(OutputStream)",2,2,30,103,3
"org.apache.commons.io.output.DeferredFileOutputStreamTest.DeferredFileOutputStreamTest(String)",1,1,9,8,1
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold()",1,2,25,153,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold()",1,2,21,147,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold()",1,2,21,160,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold()",1,2,29,393,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly()",1,2,28,340,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()",1,2,21,175,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError()",1,1,16,73,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached()",1,2,29,264,2
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()",1,2,30,238,3
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()",1,2,29,225,3
"org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(File)",1,3,30,182,4
"org.apache.commons.io.output.DemuxOutputStream.bindStream(OutputStream)",1,1,12,22,1
"org.apache.commons.io.output.DemuxOutputStream.close()",1,2,15,36,2
"org.apache.commons.io.output.DemuxOutputStream.flush()",1,2,15,36,2
"org.apache.commons.io.output.DemuxOutputStream.write(int)",1,2,16,46,2
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,Charset)",1,1,11,19,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,Charset,boolean)",1,1,13,38,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,CharsetEncoder)",1,1,11,19,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,CharsetEncoder,boolean)",1,1,13,38,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,String)",1,1,11,19,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,String,boolean)",1,1,13,38,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,Charset)",1,1,11,24,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,Charset,boolean)",1,1,12,28,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,CharsetEncoder)",1,1,11,24,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,CharsetEncoder,boolean)",1,1,12,28,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,String)",1,1,11,24,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,String,boolean)",1,1,12,28,1
"org.apache.commons.io.output.FileWriterWithEncoding.close()",1,1,8,11,1
"org.apache.commons.io.output.FileWriterWithEncoding.flush()",1,1,8,11,1
"org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)",3,5,47,365,9
"org.apache.commons.io.output.FileWriterWithEncoding.write(String)",1,1,9,15,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(String,int,int)",1,1,11,31,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(char[])",1,1,9,19,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)",1,1,11,36,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(int)",1,1,9,19,1
"org.apache.commons.io.output.FileWriterWithEncodingTest.FileWriterWithEncodingTest(String)",1,1,3,8,1
"org.apache.commons.io.output.FileWriterWithEncodingTest.setUp()",1,2,20,250,3
"org.apache.commons.io.output.FileWriterWithEncodingTest.tearDown()",1,1,6,26,1
"org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_directory()",1,2,14,74,2
"org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_encoding_badEncoding()",1,2,14,72,2
"org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_File_nullFile()",1,2,14,78,2
"org.apache.commons.io.output.FileWriterWithEncodingTest.testConstructor_fileName_nullFile()",1,2,14,78,2
"org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()",1,3,52,451,5
"org.apache.commons.io.output.FileWriterWithEncodingTest.testSameEncoding()",1,1,21,188,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File)",1,1,11,19,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,Charset)",1,1,12,24,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,Charset,boolean,String)",2,3,35,237,4
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,String)",1,1,14,24,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,String,boolean,String)",1,1,17,33,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,boolean)",1,1,11,24,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,boolean,String)",1,1,12,28,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String)",1,1,11,19,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String,boolean)",1,1,11,24,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String,boolean,String)",1,1,12,28,1
"org.apache.commons.io.output.LockableFileWriter.close()",1,1,13,28,1
"org.apache.commons.io.output.LockableFileWriter.createLock()",2,2,14,66,2
"org.apache.commons.io.output.LockableFileWriter.flush()",1,1,8,11,1
"org.apache.commons.io.output.LockableFileWriter.initWriter(File,Charset,boolean)",1,5,36,239,5
"org.apache.commons.io.output.LockableFileWriter.testLockDir(File)",3,3,17,87,3
"org.apache.commons.io.output.LockableFileWriter.write(String)",1,1,9,15,1
"org.apache.commons.io.output.LockableFileWriter.write(String,int,int)",1,1,11,31,1
"org.apache.commons.io.output.LockableFileWriter.write(char[])",1,1,9,19,1
"org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)",1,1,11,36,1
"org.apache.commons.io.output.LockableFileWriter.write(int)",1,1,9,19,1
"org.apache.commons.io.output.LockableFileWriterTest.LockableFileWriterTest(String)",1,1,3,8,1
"org.apache.commons.io.output.LockableFileWriterTest.setUp()",1,1,8,101,1
"org.apache.commons.io.output.LockableFileWriterTest.tearDown()",1,1,6,20,1
"org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()",1,2,27,249,2
"org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()",1,2,16,93,2
"org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()",1,2,16,104,2
"org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()",1,2,16,97,2
"org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()",1,2,16,97,2
"org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()",1,3,40,324,3
"org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()",1,1,25,167,1
"org.apache.commons.io.output.NullOutputStream.write(byte[])",1,1,9,8,1
"org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)",1,1,10,10,1
"org.apache.commons.io.output.NullOutputStream.write(int)",1,1,8,4,1
"org.apache.commons.io.output.NullOutputStreamTest.NullOutputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.output.NullOutputStreamTest.testNull()",1,1,11,131,1
"org.apache.commons.io.output.NullWriter.NullWriter()",1,1,5,0,1
"org.apache.commons.io.output.NullWriter.append(CharSequence)",1,1,11,4,1
"org.apache.commons.io.output.NullWriter.append(CharSequence,int,int)",1,1,13,10,1
"org.apache.commons.io.output.NullWriter.append(char)",1,1,11,8,1
"org.apache.commons.io.output.NullWriter.close()",1,1,5,2,1
"org.apache.commons.io.output.NullWriter.flush()",1,1,5,2,1
"org.apache.commons.io.output.NullWriter.write(String)",1,1,8,2,1
"org.apache.commons.io.output.NullWriter.write(String,int,int)",1,1,10,6,1
"org.apache.commons.io.output.NullWriter.write(char[])",1,1,8,4,1
"org.apache.commons.io.output.NullWriter.write(char[],int,int)",1,1,10,10,1
"org.apache.commons.io.output.NullWriter.write(int)",1,1,8,4,1
"org.apache.commons.io.output.NullWriterTest.NullWriterTest(String)",1,1,3,8,1
"org.apache.commons.io.output.NullWriterTest.testNull()",1,1,11,135,1
"org.apache.commons.io.output.ProxyOutputStream.ProxyOutputStream(OutputStream)",1,1,9,8,1
"org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)",1,1,16,13,1
"org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)",1,1,15,13,1
"org.apache.commons.io.output.ProxyOutputStream.close()",1,2,12,28,2
"org.apache.commons.io.output.ProxyOutputStream.flush()",1,2,12,28,2
"org.apache.commons.io.output.ProxyOutputStream.handleIOException(IOException)",1,1,12,11,1
"org.apache.commons.io.output.ProxyOutputStream.write(byte[])",1,2,16,93,3
"org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)",1,2,17,76,2
"org.apache.commons.io.output.ProxyOutputStream.write(int)",1,2,15,57,2
"org.apache.commons.io.output.ProxyOutputStreamTest.setUp()",1,2,6,68,2
"org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()",1,1,5,53,1
"org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()",1,1,5,34,1
"org.apache.commons.io.output.ProxyWriter.ProxyWriter(Writer)",1,1,9,8,1
"org.apache.commons.io.output.ProxyWriter.afterWrite(int)",1,1,16,13,1
"org.apache.commons.io.output.ProxyWriter.append(CharSequence)",1,3,22,103,3
"org.apache.commons.io.output.ProxyWriter.append(CharSequence,int,int)",1,2,20,94,2
"org.apache.commons.io.output.ProxyWriter.append(char)",1,2,18,62,2
"org.apache.commons.io.output.ProxyWriter.beforeWrite(int)",1,1,15,13,1
"org.apache.commons.io.output.ProxyWriter.close()",1,2,12,28,2
"org.apache.commons.io.output.ProxyWriter.flush()",1,2,12,28,2
"org.apache.commons.io.output.ProxyWriter.handleIOException(IOException)",1,1,12,11,1
"org.apache.commons.io.output.ProxyWriter.write(String)",1,3,19,97,3
"org.apache.commons.io.output.ProxyWriter.write(String,int,int)",1,2,17,70,2
"org.apache.commons.io.output.ProxyWriter.write(char[])",1,2,19,103,3
"org.apache.commons.io.output.ProxyWriter.write(char[],int,int)",1,2,17,76,2
"org.apache.commons.io.output.ProxyWriter.write(int)",1,2,15,57,2
"org.apache.commons.io.output.ProxyWriterTest.ProxyWriterTest(String)",1,1,3,8,1
"org.apache.commons.io.output.ProxyWriterTest.testAppendCharSequence()",1,2,11,70,2
"org.apache.commons.io.output.ProxyWriterTest.testNullCharArray()",1,3,14,101,3
"org.apache.commons.io.output.ProxyWriterTest.testNullCharSequencec()",1,2,9,46,2
"org.apache.commons.io.output.ProxyWriterTest.testNullString()",1,3,14,91,3
"org.apache.commons.io.output.ProxyWriterTest.testWriteCharArray()",1,2,11,93,2
"org.apache.commons.io.output.ProxyWriterTest.testWriteCharArrayPartial()",1,2,11,105,2
"org.apache.commons.io.output.ProxyWriterTest.testWriteString()",1,2,11,70,2
"org.apache.commons.io.output.ProxyWriterTest.testWriteStringPartial()",1,2,11,83,2
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter()",1,1,6,8,1
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter(StringBuilder)",1,1,8,22,2
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter(int)",1,1,8,15,1
"org.apache.commons.io.output.StringBuilderWriter.append(CharSequence)",1,1,11,15,1
"org.apache.commons.io.output.StringBuilderWriter.append(CharSequence,int,int)",1,1,13,31,1
"org.apache.commons.io.output.StringBuilderWriter.append(char)",1,1,11,19,1
"org.apache.commons.io.output.StringBuilderWriter.close()",1,1,6,2,1
"org.apache.commons.io.output.StringBuilderWriter.flush()",1,1,6,2,1
"org.apache.commons.io.output.StringBuilderWriter.getBuilder()",1,1,8,4,1
"org.apache.commons.io.output.StringBuilderWriter.toString()",1,1,9,8,1
"org.apache.commons.io.output.StringBuilderWriter.write(String)",1,2,11,26,2
"org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)",1,2,13,50,2
"org.apache.commons.io.output.StringBuilderWriterTest.StringBuilderWriterTest(String)",1,1,7,8,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendChar()",1,1,6,57,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequence()",1,1,6,44,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequencePortion()",1,1,6,76,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructCapacity()",1,1,6,39,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructNull()",1,1,6,39,1
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()",1,1,8,62,1
"org.apache.commons.io.output.StringBuilderWriterTest.testClose()",1,2,12,85,2
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteChar()",1,1,10,98,1
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArray()",1,1,8,108,1
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArrayPortion()",1,1,8,97,1
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteString()",1,1,8,62,1
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteStringPortion()",1,1,8,91,1
"org.apache.commons.io.output.TaggedOutputStream.TaggedOutputStream(OutputStream)",1,1,8,8,1
"org.apache.commons.io.output.TaggedOutputStream.handleIOException(IOException)",1,1,10,19,1
"org.apache.commons.io.output.TaggedOutputStream.isCauseOf(Exception)",1,1,10,15,1
"org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(Exception)",1,1,13,15,1
"org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream()",1,7,44,293,7
"org.apache.commons.io.output.TaggedOutputStreamTest.testNormalStream()",1,2,17,218,2
"org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()",1,3,19,128,3
"org.apache.commons.io.output.TeeOutputStream.TeeOutputStream(OutputStream,OutputStream)",1,1,9,19,1
"org.apache.commons.io.output.TeeOutputStream.close()",1,1,19,33,1
"org.apache.commons.io.output.TeeOutputStream.flush()",1,1,9,24,1
"org.apache.commons.io.output.TeeOutputStream.write(byte[])",1,1,10,41,1
"org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)",1,1,12,68,1
"org.apache.commons.io.output.TeeOutputStream.write(int)",1,1,10,41,1
"org.apache.commons.io.output.TeeOutputStreamTest.ExceptionOnCloseByteArrayOutputStream.close()",1,1,4,11,1
"org.apache.commons.io.output.TeeOutputStreamTest.RecordCloseByteArrayOutputStream.close()",1,1,5,19,1
"org.apache.commons.io.output.TeeOutputStreamTest.TeeOutputStreamTest(String)",1,1,3,8,1
"org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(String,byte[],byte[])",1,2,6,129,2
"org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()",1,2,15,76,2
"org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()",1,2,15,76,2
"org.apache.commons.io.output.TeeOutputStreamTest.testTee()",1,2,22,405,4
"org.apache.commons.io.output.ThresholdingOutputStream.ThresholdingOutputStream(int)",1,1,10,11,1
"org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)",1,2,18,62,3
"org.apache.commons.io.output.ThresholdingOutputStream.close()",1,1,19,24,2
"org.apache.commons.io.output.ThresholdingOutputStream.flush()",1,1,11,11,1
"org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()",1,1,9,8,1
"org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()",1,1,9,8,1
"org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()",1,1,11,15,1
"org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()",1,1,9,22,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])",1,1,15,43,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)",1,1,17,53,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(int)",1,1,14,38,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer)",1,1,10,19,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,Charset)",1,1,11,19,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,Charset,int,boolean)",1,1,21,62,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,CharsetDecoder)",1,1,12,19,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,CharsetDecoder,int,boolean)",1,1,19,55,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,String)",1,1,11,19,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,String,int,boolean)",1,1,15,33,1
"org.apache.commons.io.output.WriterOutputStream.close()",1,1,12,24,1
"org.apache.commons.io.output.WriterOutputStream.flush()",1,1,11,15,1
"org.apache.commons.io.output.WriterOutputStream.flushOutput()",1,2,11,60,2
"org.apache.commons.io.output.WriterOutputStream.processInput(boolean)",4,3,25,131,4
"org.apache.commons.io.output.WriterOutputStream.write(byte[])",1,1,10,26,1
"org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)",1,3,21,127,3
"org.apache.commons.io.output.WriterOutputStream.write(int)",1,1,10,36,1
"org.apache.commons.io.output.WriterOutputStreamTest.testFlush()",1,1,8,106,1
"org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithBufferedWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithSingleByteWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithBufferedWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithSingleByteWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithBufferedWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithSingleByteWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithSingleByteWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithBufferedWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testUTF8WithSingleByteWrite()",1,1,3,15,1
"org.apache.commons.io.output.WriterOutputStreamTest.testWithBufferedWrite(String,String)",1,2,13,190,2
"org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite(String,String)",1,2,10,94,2
"org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()",1,1,6,68,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(File)",1,1,11,15,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(File,String)",1,1,12,19,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(OutputStream)",1,1,9,11,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(OutputStream,String)",1,1,11,34,2
"org.apache.commons.io.output.XmlStreamWriter.close()",1,2,14,74,2
"org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)",1,8,55,614,9
"org.apache.commons.io.output.XmlStreamWriter.flush()",1,2,11,26,2
"org.apache.commons.io.output.XmlStreamWriter.getDefaultEncoding()",1,1,8,4,1
"org.apache.commons.io.output.XmlStreamWriter.getEncoding()",1,1,8,4,1
"org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)",1,2,16,80,2
"org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent(String,String,String)",1,1,10,112,1
"org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(String,String)",1,1,4,24,1
"org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter(String,String,String)",1,1,9,85,3
"org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent(String,String)",1,1,8,66,2
"org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()",1,1,7,76,1
"org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()",1,1,10,69,1
"org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()",1,1,4,24,1
"org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()",1,1,3,15,1
"org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()",1,1,3,15,1
"org.apache.commons.io.testtools.FileBasedTestCase.FileBasedTestCase(String)",1,1,3,8,1
"org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(File,File)",1,2,35,312,2
"org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(byte[],File)",1,3,18,279,4
"org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(char[],File)",1,3,18,279,4
"org.apache.commons.io.testtools.FileBasedTestCase.checkFile(File,File)",1,1,5,31,1
"org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(OutputStream)",1,2,10,57,2
"org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(Writer)",1,2,10,57,2
"org.apache.commons.io.testtools.FileBasedTestCase.createFile(File,long)",2,1,14,101,2
"org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(File,String[])",2,3,13,146,4
"org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(File)",1,2,6,39,2
"org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(OutputStream,long)",1,2,8,83,2
"org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(long)",1,2,9,72,2
"org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()",1,2,7,48,2
"org.apache.commons.io.testtools.FileBasedTestCase.newFile(String)",1,2,11,39,2
"org.apache.commons.io.testtools.YellOnCloseInputStream.YellOnCloseInputStream(InputStream)",1,1,6,8,1
"org.apache.commons.io.testtools.YellOnCloseInputStream.close()",1,1,5,15,1
"org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.YellOnFlushAndCloseOutputStream(OutputStream,boolean,boolean)",1,1,10,39,1
"org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.close()",2,1,8,33,2
"org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()",2,1,8,33,2
"org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()",1,1,4,13,1

Class,LOC,OCavg,V,WMC
"org.apache.commons.io.ByteOrderMark",148,2.25,"1,423",18
"org.apache.commons.io.ByteOrderMarkTestCase",99,1.00,"1,904",10
"org.apache.commons.io.Charsets",124,2.00,196,4
"org.apache.commons.io.CharsetsTestCase",38,1.00,262,7
"org.apache.commons.io.CopyUtils",278,1.18,797,13
"org.apache.commons.io.CopyUtilsTest",145,1.00,"1,880",14
"org.apache.commons.io.DemuxTestCase",103,1.25,"1,977",10
"org.apache.commons.io.DemuxTestCase.ReaderThread",40,1.33,267,4
"org.apache.commons.io.DemuxTestCase.WriterThread",35,1.50,206,3
"org.apache.commons.io.DirectoryWalker",533,1.69,"1,711",27
"org.apache.commons.io.DirectoryWalker.CancelException",52,1.00,168,4
"org.apache.commons.io.DirectoryWalkerTestCase",305,1.35,"7,358",27
"org.apache.commons.io.DirectoryWalkerTestCase.TestCancelWalker",43,1.60,330,8
"org.apache.commons.io.DirectoryWalkerTestCase.TestFalseFileFinder",14,1.00,55,2
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinder",32,1.00,194,5
"org.apache.commons.io.DirectoryWalkerTestCase.TestFileFinderString",24,1.00,132,3
"org.apache.commons.io.DirectoryWalkerTestCase.TestMultiThreadCancelWalker",52,1.50,386,9
"org.apache.commons.io.DirectoryWalkerTestCaseJava4",293,1.29,"7,024",27
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestCancelWalker",43,1.60,330,8
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFalseFileFinder",14,1.00,55,2
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestFileFinder",32,1.00,194,5
"org.apache.commons.io.DirectoryWalkerTestCaseJava4.TestMultiThreadCancelWalker",52,1.50,386,9
"org.apache.commons.io.EndianUtils",423,1.06,"5,448",33
"org.apache.commons.io.EndianUtilsTest",229,1.04,"5,002",24
"org.apache.commons.io.FileCleaner",132,1.00,220,7
"org.apache.commons.io.FileCleanerTestCase",16,1.00,36,2
"org.apache.commons.io.FileCleaningTracker",164,1.62,"1,035",13
"org.apache.commons.io.FileCleaningTracker.Reaper",32,2.00,206,4
"org.apache.commons.io.FileCleaningTracker.Tracker",43,1.33,151,4
"org.apache.commons.io.FileCleaningTrackerTestCase",245,1.38,"3,932",22
"org.apache.commons.io.FileDeleteStrategy",101,1.40,404,7
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy",25,1.00,48,2
"org.apache.commons.io.FileDeleteStrategyTestCase",100,1.00,971,8
"org.apache.commons.io.FileExistsException",34,1.00,82,3
"org.apache.commons.io.FileSystemUtils",474,3.62,"5,038",47
"org.apache.commons.io.FileSystemUtilsTestCase",427,1.18,"6,613",39
"org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils",45,1.11,314,10
"org.apache.commons.io.FileUtils","2,706",2.73,"24,101",289
"org.apache.commons.io.FileUtilsCleanDirectoryTestCase",100,1.30,"1,214",13
"org.apache.commons.io.FileUtilsCleanSymlinksTestCase",159,1.64,"2,602",18
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase",127,1.00,"1,444",13
"org.apache.commons.io.FileUtilsFileNewerTestCase",122,1.22,"1,018",11
"org.apache.commons.io.FileUtilsListFilesTestCase",151,1.33,"2,432",12
"org.apache.commons.io.FileUtilsTestCase","2,081",1.12,"43,745",155
"org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker",24,1.25,133,5
"org.apache.commons.io.FileUtilsWaitForTestCase",28,1.00,116,4
"org.apache.commons.io.FilenameUtils","1,306",3.85,"11,053",150
"org.apache.commons.io.FilenameUtilsTestCase",829,1.03,"31,392",34
"org.apache.commons.io.FilenameUtilsWildcardTestCase",190,1.30,"4,991",13
"org.apache.commons.io.HexDump",130,3.50,"1,458",14
"org.apache.commons.io.HexDumpTest",203,6.00,"4,915",24
"org.apache.commons.io.IOCase",217,1.83,"1,230",22
"org.apache.commons.io.IOCaseTestCase",297,1.05,"6,667",22
"org.apache.commons.io.IOExceptionWithCause",43,1.50,110,3
"org.apache.commons.io.IOExceptionWithCauseTestCase",28,1.00,168,3
"org.apache.commons.io.IOUtils","2,384",1.69,"12,821",177
"org.apache.commons.io.IOUtilsCopyTestCase",266,1.00,"3,390",25
"org.apache.commons.io.IOUtilsTestCase",908,1.04,"14,415",76
"org.apache.commons.io.IOUtilsWriteTestCase",527,1.00,"8,147",56
"org.apache.commons.io.LineIterator",145,2.12,587,17
"org.apache.commons.io.LineIteratorTestCase",383,1.30,"3,819",35
"org.apache.commons.io.SelectorAdapter",42,1.00,136,9
"org.apache.commons.io.TaggedIOException",106,1.20,252,6
"org.apache.commons.io.TaggedIOExceptionTest",14,1.00,114,1
"org.apache.commons.io.ThreadMonitor",90,1.40,310,7
"org.apache.commons.io.ThreadMonitorTestCase",56,1.00,307,4
"org.apache.commons.io.comparator.AbstractFileComparator",49,1.67,102,5
"org.apache.commons.io.comparator.ComparatorAbstractTestCase",102,1.00,982,10
"org.apache.commons.io.comparator.CompositeFileComparator",92,2.75,606,11
"org.apache.commons.io.comparator.CompositeFileComparatorTest",60,1.00,710,5
"org.apache.commons.io.comparator.DefaultFileComparator",41,1.00,70,1
"org.apache.commons.io.comparator.DefaultFileComparatorTest",24,1.00,124,2
"org.apache.commons.io.comparator.DirectoryFileComparator",53,1.50,136,3
"org.apache.commons.io.comparator.DirectoryFileComparatorTest",39,1.00,174,4
"org.apache.commons.io.comparator.ExtensionFileComparator",85,1.25,335,5
"org.apache.commons.io.comparator.ExtensionFileComparatorTest",37,1.00,487,3
"org.apache.commons.io.comparator.LastModifiedFileComparator",52,3.00,171,3
"org.apache.commons.io.comparator.LastModifiedFileComparatorTest",47,2.00,375,4
"org.apache.commons.io.comparator.NameFileComparator",79,1.25,306,5
"org.apache.commons.io.comparator.NameFileComparatorTest",37,1.00,484,3
"org.apache.commons.io.comparator.PathFileComparator",80,1.25,306,5
"org.apache.commons.io.comparator.PathFileComparatorTest",37,1.00,484,3
"org.apache.commons.io.comparator.ReverseComparator",41,1.33,143,4
"org.apache.commons.io.comparator.SizeFileComparator",107,2.50,530,10
"org.apache.commons.io.comparator.SizeFileComparatorTest",55,1.00,586,4
"org.apache.commons.io.filefilter.AbstractFileFilter",40,1.00,92,3
"org.apache.commons.io.filefilter.AgeFileFilter",124,1.25,383,10
"org.apache.commons.io.filefilter.AndFileFilter",132,2.20,956,22
"org.apache.commons.io.filefilter.AndFileFilterTestCase",246,1.08,"3,661",14
"org.apache.commons.io.filefilter.CanReadFileFilter",66,1.00,95,2
"org.apache.commons.io.filefilter.CanWriteFileFilter",55,1.00,70,2
"org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase",127,1.71,"2,658",12
"org.apache.commons.io.filefilter.DelegateFileFilter",78,2.00,423,10
"org.apache.commons.io.filefilter.DirectoryFileFilter",48,1.00,66,2
"org.apache.commons.io.filefilter.EmptyFileFilter",59,1.50,162,3
"org.apache.commons.io.filefilter.FalseFileFilter",46,1.00,69,3
"org.apache.commons.io.filefilter.FileFileFilter",37,1.00,50,2
"org.apache.commons.io.filefilter.FileFilterTestCase","1,046",1.10,"23,482",56
"org.apache.commons.io.filefilter.FileFilterUtils",718,1.40,"2,535",60
"org.apache.commons.io.filefilter.HiddenFileFilter",51,1.00,70,2
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase",71,1.89,"1,783",17
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterFalseFileFilter",22,1.00,150,5
"org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.TesterTrueFileFilter",22,1.00,150,5
"org.apache.commons.io.filefilter.MagicNumberFileFilter",238,2.33,"1,050",14
"org.apache.commons.io.filefilter.NameFileFilter",157,2.44,912,22
"org.apache.commons.io.filefilter.NotFileFilter",53,1.25,190,5
"org.apache.commons.io.filefilter.OrFileFilter",125,2.00,861,20
"org.apache.commons.io.filefilter.OrFileFilterTestCase",246,1.08,"3,661",14
"org.apache.commons.io.filefilter.PrefixFileFilter",162,2.44,912,22
"org.apache.commons.io.filefilter.RegexFileFilter",89,2.00,371,10
"org.apache.commons.io.filefilter.RegexFileFilterTestCase",78,1.40,"1,094",7
"org.apache.commons.io.filefilter.SizeFileFilter",80,1.75,302,7
"org.apache.commons.io.filefilter.SuffixFileFilter",163,2.44,917,22
"org.apache.commons.io.filefilter.TrueFileFilter",45,1.00,69,3
"org.apache.commons.io.filefilter.WildcardFileFilter",163,2.44,906,22
"org.apache.commons.io.filefilter.WildcardFilter",108,2.80,491,14
"org.apache.commons.io.input.AutoCloseInputStream",67,1.25,127,5
"org.apache.commons.io.input.AutoCloseInputStreamTest",72,1.83,"1,049",11
"org.apache.commons.io.input.BOMInputStream",357,2.28,"2,349",41
"org.apache.commons.io.input.BOMInputStreamTest",306,1.09,"7,058",36
"org.apache.commons.io.input.BOMInputStreamTest.ExpectCloseInputStream",17,1.00,82,3
"org.apache.commons.io.input.BoundedInputStream",188,1.50,"1,104",21
"org.apache.commons.io.input.BoundedInputStreamTest",63,2.00,"1,196",8
"org.apache.commons.io.input.BrokenInputStream",78,1.00,160,7
"org.apache.commons.io.input.BrokenInputStreamTest",64,1.00,446,6
"org.apache.commons.io.input.CharSequenceInputStream",160,2.00,"1,940",28
"org.apache.commons.io.input.CharSequenceInputStreamTest",122,1.46,"2,092",19
"org.apache.commons.io.input.CharSequenceReader",132,2.00,949,18
"org.apache.commons.io.input.CharSequenceReaderTest",98,1.22,"1,729",11
"org.apache.commons.io.input.ClassLoaderObjectInputStream",72,1.67,325,5
"org.apache.commons.io.input.ClassLoaderObjectInputStreamTest",35,1.00,272,3
"org.apache.commons.io.input.CloseShieldInputStream",30,1.00,33,2
"org.apache.commons.io.input.CloseShieldInputStreamTest",30,1.00,235,3
"org.apache.commons.io.input.ClosedInputStream",26,1.00,39,1
"org.apache.commons.io.input.ClosedInputStreamTest",11,1.00,36,1
"org.apache.commons.io.input.CountingInputStream",112,1.43,449,10
"org.apache.commons.io.input.CountingInputStreamTest",139,1.00,"2,192",11
"org.apache.commons.io.input.DemuxInputStream",58,1.67,185,5
"org.apache.commons.io.input.NullInputStream",298,1.94,"1,536",31
"org.apache.commons.io.input.NullInputStreamTest",184,1.78,"3,083",16
"org.apache.commons.io.input.NullInputStreamTest.TestNullInputStream",19,1.25,245,5
"org.apache.commons.io.input.NullReader",282,1.87,"1,376",28
"org.apache.commons.io.input.NullReaderTest",181,1.78,"2,947",16
"org.apache.commons.io.input.NullReaderTest.TestNullReader",19,1.25,245,5
"org.apache.commons.io.input.ProxyInputStream",200,1.15,872,15
"org.apache.commons.io.input.ProxyReader",221,1.21,"1,060",17
"org.apache.commons.io.input.ProxyReaderTest",33,1.00,437,3
"org.apache.commons.io.input.ProxyReaderTest.CustomNullReader",14,1.67,131,5
"org.apache.commons.io.input.ProxyReaderTest.ProxyReaderImpl",6,1.00,19,1
"org.apache.commons.io.input.ReaderInputStream",250,2.00,"1,679",24
"org.apache.commons.io.input.ReaderInputStreamTest",106,1.60,"1,668",16
"org.apache.commons.io.input.ReversedLinesFileReader",137,3.00,"3,479",15
"org.apache.commons.io.input.ReversedLinesFileReader.FilePart",136,4.40,"1,792",22
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize",133,1.21,"2,280",23
"org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile",65,1.75,774,7
"org.apache.commons.io.input.ReversedLinesFileReaderTestSimple",30,1.00,304,4
"org.apache.commons.io.input.SwappedDataInputStream",204,1.12,737,18
"org.apache.commons.io.input.SwappedDataInputStreamTest",96,1.06,"1,196",18
"org.apache.commons.io.input.TaggedInputStream",85,1.00,129,4
"org.apache.commons.io.input.TaggedInputStreamTest",97,1.00,"1,028",4
"org.apache.commons.io.input.Tailer",414,1.94,"2,824",33
"org.apache.commons.io.input.TailerListenerAdapter",40,1.00,26,5
"org.apache.commons.io.input.TailerTest",249,1.58,"5,133",19
"org.apache.commons.io.input.TailerTest.TestTailerListener",32,1.00,215,7
"org.apache.commons.io.input.TeeInputStream",120,1.67,525,10
"org.apache.commons.io.input.TeeInputStreamTest",63,1.00,"1,136",8
"org.apache.commons.io.input.XmlStreamReader",699,3.00,"7,995",69
"org.apache.commons.io.input.XmlStreamReaderException",103,1.00,260,7
"org.apache.commons.io.input.XmlStreamReaderTest",361,1.44,"8,257",36
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest",278,1.00,"7,411",22
"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.MockXmlStreamReader",6,1.00,48,1
"org.apache.commons.io.input.compatibility.XmlStreamReader",658,3.15,"9,068",82
"org.apache.commons.io.input.compatibility.XmlStreamReaderException",60,1.00,156,3
"org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest",20,1.00,209,2
"org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.MockXmlStreamReader",6,1.00,48,1
"org.apache.commons.io.monitor.AbstractMonitorTestCase",116,1.38,"1,412",11
"org.apache.commons.io.monitor.CollectionFileListener",145,1.06,486,17
"org.apache.commons.io.monitor.FileAlterationListenerAdaptor",65,1.00,62,8
"org.apache.commons.io.monitor.FileAlterationMonitor",158,2.08,868,25
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase",137,1.29,"1,603",9
"org.apache.commons.io.monitor.FileAlterationObserver",407,2.50,"3,112",55
"org.apache.commons.io.monitor.FileAlterationObserverTestCase",329,1.00,"6,881",10
"org.apache.commons.io.monitor.FileEntry",223,1.32,990,25
"org.apache.commons.io.output.BrokenOutputStream",57,1.00,117,5
"org.apache.commons.io.output.BrokenOutputStreamTest",48,1.00,334,4
"org.apache.commons.io.output.ByteArrayOutputStream",309,2.20,"2,482",33
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase",106,2.14,"1,574",15
"org.apache.commons.io.output.CloseShieldOutputStream",30,1.00,33,2
"org.apache.commons.io.output.CloseShieldOutputStreamTest",35,1.00,230,3
"org.apache.commons.io.output.ClosedOutputStream",27,1.00,59,1
"org.apache.commons.io.output.ClosedOutputStreamTest",16,1.00,41,1
"org.apache.commons.io.output.CountingOutputStream",95,1.33,315,8
"org.apache.commons.io.output.CountingOutputStreamTest",70,2.25,"1,166",9
"org.apache.commons.io.output.DeferredFileOutputStream",218,1.50,778,15
"org.apache.commons.io.output.DeferredFileOutputStreamTest",304,1.00,"3,224",12
"org.apache.commons.io.output.DemuxOutputStream",69,1.75,218,7
"org.apache.commons.io.output.FileWriterWithEncoding",280,1.30,"1,382",26
"org.apache.commons.io.output.FileWriterWithEncodingTest",169,1.33,"1,668",12
"org.apache.commons.io.output.LockableFileWriter",316,1.40,"1,788",28
"org.apache.commons.io.output.LockableFileWriterTest",186,1.00,"1,731",10
"org.apache.commons.io.output.NullOutputStream",41,1.00,63,3
"org.apache.commons.io.output.NullOutputStreamTest",22,1.00,174,2
"org.apache.commons.io.output.NullWriter",108,1.00,141,11
"org.apache.commons.io.output.NullWriterTest",22,1.00,178,2
"org.apache.commons.io.output.ProxyOutputStream",137,1.11,498,10
"org.apache.commons.io.output.ProxyOutputStreamTest",29,1.25,224,5
"org.apache.commons.io.output.ProxyWriter",235,1.21,"1,145",17
"org.apache.commons.io.output.ProxyWriterTest",102,1.00,902,9
"org.apache.commons.io.output.StringBuilderWriter",125,1.25,393,15
"org.apache.commons.io.output.StringBuilderWriterTest",107,1.00,"1,438",13
"org.apache.commons.io.output.TaggedOutputStream",85,1.00,127,4
"org.apache.commons.io.output.TaggedOutputStreamTest",85,1.00,819,3
"org.apache.commons.io.output.TeeOutputStream",80,1.00,348,6
"org.apache.commons.io.output.TeeOutputStreamTest",66,1.80,"1,062",9
"org.apache.commons.io.output.TeeOutputStreamTest.ExceptionOnCloseByteArrayOutputStream",6,1.00,28,1
"org.apache.commons.io.output.TeeOutputStreamTest.RecordCloseByteArrayOutputStream",8,1.00,43,1
"org.apache.commons.io.output.ThresholdingOutputStream",197,1.09,627,12
"org.apache.commons.io.output.WriterOutputStream",261,1.43,"1,239",20
"org.apache.commons.io.output.WriterOutputStreamTest",79,1.21,"1,150",17
"org.apache.commons.io.output.XmlStreamWriter",172,2.20,"1,296",22
"org.apache.commons.io.output.XmlStreamWriterTest",95,1.19,"1,246",19
"org.apache.commons.io.testtools.FileBasedTestCase",173,1.86,"2,488",26
"org.apache.commons.io.testtools.YellOnCloseInputStream",16,1.00,44,2
"org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream",37,1.50,203,6

Interface,LOC
"org.apache.commons.io.filefilter.ConditionalFileFilter",40
"org.apache.commons.io.filefilter.IOFileFilter",28
"org.apache.commons.io.input.TailerListener",43
"org.apache.commons.io.monitor.FileAlterationListener",59

Package,LOC,v(G)avg,v(G)tot
"",161,n/a,n/a
"org.apache.commons.io","19,977",1.88,"1,996"
"org.apache.commons.io.comparator","1,682",1.42,94
"org.apache.commons.io.filefilter","5,537",1.79,474
"org.apache.commons.io.input","8,531",1.84,911
"org.apache.commons.io.input.compatibility",815,4.47,143
"org.apache.commons.io.monitor","1,853",1.78,182
"org.apache.commons.io.output","5,184",1.60,473
"org.apache.commons.io.testtools",301,2.00,40

Module,LOC,v(G)avg,v(G)tot
"commons-io","48,231",1.84,"4,313"

FileType,LOC
"HTML",520
"Java","43,355"
"Text","1,095"
"XML","3,261"

Project,LOC,v(G)avg,v(G)tot
"project","48,231",1.84,"4,313"

